//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Degussa.FPASS.Db {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSDummy : DataSet {
        
        private DummysDataTable tableDummys;
        
        public DSDummy() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSDummy(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FPASS_DUMMY"] != null)) {
                    this.Tables.Add(new DummysDataTable(ds.Tables["FPASS_DUMMY"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DummysDataTable Dummys {
            get {
                return this.tableDummys;
            }
        }
        
        public override DataSet Clone() {
            DSDummy cln = ((DSDummy)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FPASS_DUMMY"] != null)) {
                this.Tables.Add(new DummysDataTable(ds.Tables["FPASS_DUMMY"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDummys = ((DummysDataTable)(this.Tables["FPASS_DUMMY"]));
            if ((this.tableDummys != null)) {
                this.tableDummys.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSDummy";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSDummy.xsd";
            this.Locale = new System.Globalization.CultureInfo("de-DE");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDummys = new DummysDataTable();
            this.Tables.Add(this.tableDummys);
        }
        
        private bool ShouldSerializeDummys() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DummyChangeEventHandler(object sender, DummyChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DummysDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnDummyID;
            
            private DataColumn columnSurname;
            
            private DataColumn columnFirstname;
            
            private DataColumn columncoordID;
            
            private DataColumn columncontractorID;
            
            internal DummysDataTable() : 
                    base("FPASS_DUMMY") {
                this.InitClass();
            }
            
            internal DummysDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn DummyIDColumn {
                get {
                    return this.columnDummyID;
                }
            }
            
            internal DataColumn SurnameColumn {
                get {
                    return this.columnSurname;
                }
            }
            
            internal DataColumn FirstnameColumn {
                get {
                    return this.columnFirstname;
                }
            }
            
            internal DataColumn coordIDColumn {
                get {
                    return this.columncoordID;
                }
            }
            
            internal DataColumn contractorIDColumn {
                get {
                    return this.columncontractorID;
                }
            }
            
            public Dummy this[int index] {
                get {
                    return ((Dummy)(this.Rows[index]));
                }
            }
            
            public event DummyChangeEventHandler DummyChanged;
            
            public event DummyChangeEventHandler DummyChanging;
            
            public event DummyChangeEventHandler DummyDeleted;
            
            public event DummyChangeEventHandler DummyDeleting;
            
            public void AddDummy(Dummy row) {
                this.Rows.Add(row);
            }
            
            public Dummy AddDummy(System.Decimal DummyID, string Surname, string Firstname, System.Decimal coordID, System.Decimal contractorID) {
                Dummy rowDummy = ((Dummy)(this.NewRow()));
                rowDummy.ItemArray = new object[] {
                        DummyID,
                        Surname,
                        Firstname,
                        coordID,
                        contractorID};
                this.Rows.Add(rowDummy);
                return rowDummy;
            }
            
            public Dummy FindByDummyID(System.Decimal DummyID) {
                return ((Dummy)(this.Rows.Find(new object[] {
                            DummyID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DummysDataTable cln = ((DummysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DummysDataTable();
            }
            
            internal void InitVars() {
                this.columnDummyID = this.Columns["DUMMY_ID"];
                this.columnSurname = this.Columns["SURNAME"];
                this.columnFirstname = this.Columns["FIRSTNAME"];
                this.columncoordID = this.Columns["COORD_ID"];
                this.columncontractorID = this.Columns["CONTRACTOR_ID"];
            }
            
            private void InitClass() {
                this.columnDummyID = new DataColumn("DUMMY_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDummyID);
                this.columnSurname = new DataColumn("SURNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSurname);
                this.columnFirstname = new DataColumn("FIRSTNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstname);
                this.columncoordID = new DataColumn("COORD_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncoordID);
                this.columncontractorID = new DataColumn("CONTRACTOR_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontractorID);
                this.Constraints.Add(new UniqueConstraint("PKDummy", new DataColumn[] {
                                this.columnDummyID}, true));
                this.columnDummyID.AllowDBNull = false;
                this.columnDummyID.Unique = true;
                this.columnSurname.AllowDBNull = false;
                this.columncontractorID.AllowDBNull = false;
            }
            
            public Dummy NewDummy() {
                return ((Dummy)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Dummy(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Dummy);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DummyChanged != null)) {
                    this.DummyChanged(this, new DummyChangeEvent(((Dummy)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DummyChanging != null)) {
                    this.DummyChanging(this, new DummyChangeEvent(((Dummy)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DummyDeleted != null)) {
                    this.DummyDeleted(this, new DummyChangeEvent(((Dummy)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DummyDeleting != null)) {
                    this.DummyDeleting(this, new DummyChangeEvent(((Dummy)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDummy(Dummy row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Dummy : DataRow {
            
            private DummysDataTable tableDummys;
            
            internal Dummy(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDummys = ((DummysDataTable)(this.Table));
            }
            
            public System.Decimal DummyID {
                get {
                    return ((System.Decimal)(this[this.tableDummys.DummyIDColumn]));
                }
                set {
                    this[this.tableDummys.DummyIDColumn] = value;
                }
            }
            
            public string Surname {
                get {
                    return ((string)(this[this.tableDummys.SurnameColumn]));
                }
                set {
                    this[this.tableDummys.SurnameColumn] = value;
                }
            }
            
            public string Firstname {
                get {
                    try {
                        return ((string)(this[this.tableDummys.FirstnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDummys.FirstnameColumn] = value;
                }
            }
            
            public System.Decimal coordID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDummys.coordIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDummys.coordIDColumn] = value;
                }
            }
            
            public System.Decimal contractorID {
                get {
                    return ((System.Decimal)(this[this.tableDummys.contractorIDColumn]));
                }
                set {
                    this[this.tableDummys.contractorIDColumn] = value;
                }
            }
            
            public bool IsFirstnameNull() {
                return this.IsNull(this.tableDummys.FirstnameColumn);
            }
            
            public void SetFirstnameNull() {
                this[this.tableDummys.FirstnameColumn] = System.Convert.DBNull;
            }
            
            public bool IscoordIDNull() {
                return this.IsNull(this.tableDummys.coordIDColumn);
            }
            
            public void SetcoordIDNull() {
                this[this.tableDummys.coordIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DummyChangeEvent : EventArgs {
            
            private Dummy eventRow;
            
            private DataRowAction eventAction;
            
            public DummyChangeEvent(Dummy row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Dummy Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
