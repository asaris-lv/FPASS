//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Degussa.FPASS.Db.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSCoWorker : DataSet {
        
        private FPASS_COWORKERDataTable tableFPASS_COWORKER;
        
        private FPASS_RECEPTIONAUTHORIZEDataTable tableFPASS_RECEPTIONAUTHORIZE;
        
        private FPASS_RECEPTIONAUTHORIZEACCESSDataTable tableFPASS_RECEPTIONAUTHORIZEACCESS;
        
        public DSCoWorker() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSCoWorker(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FPASS_COWORKER"] != null)) {
                    this.Tables.Add(new FPASS_COWORKERDataTable(ds.Tables["FPASS_COWORKER"]));
                }
                if ((ds.Tables["FPASS_RECEPTIONAUTHORIZE"] != null)) {
                    this.Tables.Add(new FPASS_RECEPTIONAUTHORIZEDataTable(ds.Tables["FPASS_RECEPTIONAUTHORIZE"]));
                }
                if ((ds.Tables["FPASS_RECEPTIONAUTHORIZEACCESS"] != null)) {
                    this.Tables.Add(new FPASS_RECEPTIONAUTHORIZEACCESSDataTable(ds.Tables["FPASS_RECEPTIONAUTHORIZEACCESS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FPASS_COWORKERDataTable FPASS_COWORKER {
            get {
                return this.tableFPASS_COWORKER;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FPASS_RECEPTIONAUTHORIZEDataTable FPASS_RECEPTIONAUTHORIZE {
            get {
                return this.tableFPASS_RECEPTIONAUTHORIZE;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FPASS_RECEPTIONAUTHORIZEACCESSDataTable FPASS_RECEPTIONAUTHORIZEACCESS {
            get {
                return this.tableFPASS_RECEPTIONAUTHORIZEACCESS;
            }
        }
        
        public override DataSet Clone() {
            DSCoWorker cln = ((DSCoWorker)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FPASS_COWORKER"] != null)) {
                this.Tables.Add(new FPASS_COWORKERDataTable(ds.Tables["FPASS_COWORKER"]));
            }
            if ((ds.Tables["FPASS_RECEPTIONAUTHORIZE"] != null)) {
                this.Tables.Add(new FPASS_RECEPTIONAUTHORIZEDataTable(ds.Tables["FPASS_RECEPTIONAUTHORIZE"]));
            }
            if ((ds.Tables["FPASS_RECEPTIONAUTHORIZEACCESS"] != null)) {
                this.Tables.Add(new FPASS_RECEPTIONAUTHORIZEACCESSDataTable(ds.Tables["FPASS_RECEPTIONAUTHORIZEACCESS"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFPASS_COWORKER = ((FPASS_COWORKERDataTable)(this.Tables["FPASS_COWORKER"]));
            if ((this.tableFPASS_COWORKER != null)) {
                this.tableFPASS_COWORKER.InitVars();
            }
            this.tableFPASS_RECEPTIONAUTHORIZE = ((FPASS_RECEPTIONAUTHORIZEDataTable)(this.Tables["FPASS_RECEPTIONAUTHORIZE"]));
            if ((this.tableFPASS_RECEPTIONAUTHORIZE != null)) {
                this.tableFPASS_RECEPTIONAUTHORIZE.InitVars();
            }
            this.tableFPASS_RECEPTIONAUTHORIZEACCESS = ((FPASS_RECEPTIONAUTHORIZEACCESSDataTable)(this.Tables["FPASS_RECEPTIONAUTHORIZEACCESS"]));
            if ((this.tableFPASS_RECEPTIONAUTHORIZEACCESS != null)) {
                this.tableFPASS_RECEPTIONAUTHORIZEACCESS.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSCoWorker";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSCoWorker.xsd";
            this.Locale = new System.Globalization.CultureInfo("de-DE");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFPASS_COWORKER = new FPASS_COWORKERDataTable();
            this.Tables.Add(this.tableFPASS_COWORKER);
            this.tableFPASS_RECEPTIONAUTHORIZE = new FPASS_RECEPTIONAUTHORIZEDataTable();
            this.Tables.Add(this.tableFPASS_RECEPTIONAUTHORIZE);
            this.tableFPASS_RECEPTIONAUTHORIZEACCESS = new FPASS_RECEPTIONAUTHORIZEACCESSDataTable();
            this.Tables.Add(this.tableFPASS_RECEPTIONAUTHORIZEACCESS);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("FPASS_COWORKERFPASS_RECEPTIONAUTHORIZE", new DataColumn[] {
                        this.tableFPASS_COWORKER.CoWorkerIDColumn}, new DataColumn[] {
                        this.tableFPASS_RECEPTIONAUTHORIZE.PKCoWorkerIDColumn});
            this.tableFPASS_RECEPTIONAUTHORIZE.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
        }
        
        private bool ShouldSerializeFPASS_COWORKER() {
            return false;
        }
        
        private bool ShouldSerializeFPASS_RECEPTIONAUTHORIZE() {
            return false;
        }
        
        private bool ShouldSerializeFPASS_RECEPTIONAUTHORIZEACCESS() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FPASS_COWORKERRowChangeEventHandler(object sender, FPASS_COWORKERRowChangeEvent e);
        
        public delegate void FPASS_RECEPTIONAUTHORIZERowChangeEventHandler(object sender, FPASS_RECEPTIONAUTHORIZERowChangeEvent e);
        
        public delegate void FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEventHandler(object sender, FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_COWORKERDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCoWorkerID;
            
            private DataColumn columnTK;
            
            private DataColumn columnPersNo;
            
            private DataColumn columnContractorID;
            
            private DataColumn columnDepartmentID;
            
            private DataColumn columnCraftID;
            
            private DataColumn columnCoordinatorID;
            
            private DataColumn columnSubcontractorID;
            
            private DataColumn columnCwOvereighteen;
            
            private DataColumn columnIdCardNo;
            
            private DataColumn columnSurname;
            
            private DataColumn columnFirstname;
            
            private DataColumn columnDateOfBirth;
            
            private DataColumn columnPlaceOfBirth;
            
            private DataColumn columnCreated;
            
            private DataColumn columnValidFrom;
            
            private DataColumn columnValidUntil;
            
            private DataColumn columnOrderNo;
            
            private DataColumn columnSecurityPass;
            
            private DataColumn columnEntryDateCoord;
            
            private DataColumn columnEntryCoordID;
            
            private DataColumn columnCheckOffDateCoord;
            
            private DataColumn columnCheckOffDateCoordID;
            
            private DataColumn columnOrcerComplete;
            
            private DataColumn columnChangeUser;
            
            private DataColumn columnTimestamp;
            
            private DataColumn columnReturnZKS;
            
            private DataColumn columnAccess;
            
            private DataColumn columnStatus;
            
            private DataColumn columnMandatorID;
            
            internal FPASS_COWORKERDataTable() : 
                    base("FPASS_COWORKER") {
                this.InitClass();
            }
            
            internal FPASS_COWORKERDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CoWorkerIDColumn {
                get {
                    return this.columnCoWorkerID;
                }
            }
            
            internal DataColumn TKColumn {
                get {
                    return this.columnTK;
                }
            }
            
            internal DataColumn PersNoColumn {
                get {
                    return this.columnPersNo;
                }
            }
            
            internal DataColumn ContractorIDColumn {
                get {
                    return this.columnContractorID;
                }
            }
            
            internal DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            internal DataColumn CraftIDColumn {
                get {
                    return this.columnCraftID;
                }
            }
            
            internal DataColumn CoordinatorIDColumn {
                get {
                    return this.columnCoordinatorID;
                }
            }
            
            internal DataColumn SubcontractorIDColumn {
                get {
                    return this.columnSubcontractorID;
                }
            }
            
            internal DataColumn CwOvereighteenColumn {
                get {
                    return this.columnCwOvereighteen;
                }
            }
            
            internal DataColumn IdCardNoColumn {
                get {
                    return this.columnIdCardNo;
                }
            }
            
            internal DataColumn SurnameColumn {
                get {
                    return this.columnSurname;
                }
            }
            
            internal DataColumn FirstnameColumn {
                get {
                    return this.columnFirstname;
                }
            }
            
            internal DataColumn DateOfBirthColumn {
                get {
                    return this.columnDateOfBirth;
                }
            }
            
            internal DataColumn PlaceOfBirthColumn {
                get {
                    return this.columnPlaceOfBirth;
                }
            }
            
            internal DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            internal DataColumn ValidFromColumn {
                get {
                    return this.columnValidFrom;
                }
            }
            
            internal DataColumn ValidUntilColumn {
                get {
                    return this.columnValidUntil;
                }
            }
            
            internal DataColumn OrderNoColumn {
                get {
                    return this.columnOrderNo;
                }
            }
            
            internal DataColumn SecurityPassColumn {
                get {
                    return this.columnSecurityPass;
                }
            }
            
            internal DataColumn EntryDateCoordColumn {
                get {
                    return this.columnEntryDateCoord;
                }
            }
            
            internal DataColumn EntryCoordIDColumn {
                get {
                    return this.columnEntryCoordID;
                }
            }
            
            internal DataColumn CheckOffDateCoordColumn {
                get {
                    return this.columnCheckOffDateCoord;
                }
            }
            
            internal DataColumn CheckOffDateCoordIDColumn {
                get {
                    return this.columnCheckOffDateCoordID;
                }
            }
            
            internal DataColumn OrcerCompleteColumn {
                get {
                    return this.columnOrcerComplete;
                }
            }
            
            internal DataColumn ChangeUserColumn {
                get {
                    return this.columnChangeUser;
                }
            }
            
            internal DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            internal DataColumn ReturnZKSColumn {
                get {
                    return this.columnReturnZKS;
                }
            }
            
            internal DataColumn AccessColumn {
                get {
                    return this.columnAccess;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn MandatorIDColumn {
                get {
                    return this.columnMandatorID;
                }
            }
            
            public FPASS_COWORKERRow this[int index] {
                get {
                    return ((FPASS_COWORKERRow)(this.Rows[index]));
                }
            }
            
            public event FPASS_COWORKERRowChangeEventHandler FPASS_COWORKERRowChanged;
            
            public event FPASS_COWORKERRowChangeEventHandler FPASS_COWORKERRowChanging;
            
            public event FPASS_COWORKERRowChangeEventHandler FPASS_COWORKERRowDeleted;
            
            public event FPASS_COWORKERRowChangeEventHandler FPASS_COWORKERRowDeleting;
            
            public void AddFPASS_COWORKERRow(FPASS_COWORKERRow row) {
                this.Rows.Add(row);
            }
            
            public FPASS_COWORKERRow AddFPASS_COWORKERRow(
                        System.Decimal CoWorkerID, 
                        System.Decimal TK, 
                        System.Decimal PersNo, 
                        System.Decimal ContractorID, 
                        System.Decimal DepartmentID, 
                        System.Decimal CraftID, 
                        System.Decimal CoordinatorID, 
                        System.Decimal SubcontractorID, 
                        string CwOvereighteen, 
                        System.Decimal IdCardNo, 
                        string Surname, 
                        string Firstname, 
                        System.DateTime DateOfBirth, 
                        string PlaceOfBirth, 
                        System.DateTime Created, 
                        System.DateTime ValidFrom, 
                        System.DateTime ValidUntil, 
                        string OrderNo, 
                        string SecurityPass, 
                        System.DateTime EntryDateCoord, 
                        System.Decimal EntryCoordID, 
                        System.DateTime CheckOffDateCoord, 
                        System.Decimal CheckOffDateCoordID, 
                        string OrcerComplete, 
                        System.Decimal ChangeUser, 
                        System.DateTime Timestamp, 
                        string ReturnZKS, 
                        string Access, 
                        string Status, 
                        System.Decimal MandatorID) {
                FPASS_COWORKERRow rowFPASS_COWORKERRow = ((FPASS_COWORKERRow)(this.NewRow()));
                rowFPASS_COWORKERRow.ItemArray = new object[] {
                        CoWorkerID,
                        TK,
                        PersNo,
                        ContractorID,
                        DepartmentID,
                        CraftID,
                        CoordinatorID,
                        SubcontractorID,
                        CwOvereighteen,
                        IdCardNo,
                        Surname,
                        Firstname,
                        DateOfBirth,
                        PlaceOfBirth,
                        Created,
                        ValidFrom,
                        ValidUntil,
                        OrderNo,
                        SecurityPass,
                        EntryDateCoord,
                        EntryCoordID,
                        CheckOffDateCoord,
                        CheckOffDateCoordID,
                        OrcerComplete,
                        ChangeUser,
                        Timestamp,
                        ReturnZKS,
                        Access,
                        Status,
                        MandatorID};
                this.Rows.Add(rowFPASS_COWORKERRow);
                return rowFPASS_COWORKERRow;
            }
            
            public FPASS_COWORKERRow FindByCoWorkerID(System.Decimal CoWorkerID) {
                return ((FPASS_COWORKERRow)(this.Rows.Find(new object[] {
                            CoWorkerID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FPASS_COWORKERDataTable cln = ((FPASS_COWORKERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FPASS_COWORKERDataTable();
            }
            
            internal void InitVars() {
                this.columnCoWorkerID = this.Columns["CWR_ID"];
                this.columnTK = this.Columns["CWR_TK"];
                this.columnPersNo = this.Columns["CWR_PERSNO"];
                this.columnContractorID = this.Columns["CWR_EXCO_ID"];
                this.columnDepartmentID = this.Columns["CWR_DEPT_ID"];
                this.columnCraftID = this.Columns["CWR_CRA_ID"];
                this.columnCoordinatorID = this.Columns["CWR_ECOD_ID"];
                this.columnSubcontractorID = this.Columns["CWR_SUBE_ID"];
                this.columnCwOvereighteen = this.Columns["CWR_OVEREIGHTEEN_YN"];
                this.columnIdCardNo = this.Columns["CWR_IDCARDNO"];
                this.columnSurname = this.Columns["CWR_SURNAME"];
                this.columnFirstname = this.Columns["CWR_FIRSTNAME"];
                this.columnDateOfBirth = this.Columns["CWR_DATEOFBIRTH"];
                this.columnPlaceOfBirth = this.Columns["CWR_PLACEOFBIRTH"];
                this.columnCreated = this.Columns["CWR_DATECREATED"];
                this.columnValidFrom = this.Columns["CWR_VALIDFROM"];
                this.columnValidUntil = this.Columns["CWR_VALIDUNTIL"];
                this.columnOrderNo = this.Columns["CWR_ORDERNO"];
                this.columnSecurityPass = this.Columns["CWR_SECPASS_YN"];
                this.columnEntryDateCoord = this.Columns["CWR_ENTRYDATECOOD"];
                this.columnEntryCoordID = this.Columns["CWR_ENTRYCOODID"];
                this.columnCheckOffDateCoord = this.Columns["CWR_CHKOFFDATECOOD"];
                this.columnCheckOffDateCoordID = this.Columns["CWR_CHKOFFCOODID"];
                this.columnOrcerComplete = this.Columns["CWR_ORDERCOMPLET_YN"];
                this.columnChangeUser = this.Columns["CWR_CHANGEUSER"];
                this.columnTimestamp = this.Columns["CWR_TIMESTAMP"];
                this.columnReturnZKS = this.Columns["CWR_RETURNCODE_ZKS"];
                this.columnAccess = this.Columns["CWR_ACCESS"];
                this.columnStatus = this.Columns["CWR_STATUS"];
                this.columnMandatorID = this.Columns["CWR_MND_ID"];
            }
            
            private void InitClass() {
                this.columnCoWorkerID = new DataColumn("CWR_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCoWorkerID);
                this.columnTK = new DataColumn("CWR_TK", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTK);
                this.columnPersNo = new DataColumn("CWR_PERSNO", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPersNo);
                this.columnContractorID = new DataColumn("CWR_EXCO_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContractorID);
                this.columnDepartmentID = new DataColumn("CWR_DEPT_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDepartmentID);
                this.columnCraftID = new DataColumn("CWR_CRA_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCraftID);
                this.columnCoordinatorID = new DataColumn("CWR_ECOD_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCoordinatorID);
                this.columnSubcontractorID = new DataColumn("CWR_SUBE_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubcontractorID);
                this.columnCwOvereighteen = new DataColumn("CWR_OVEREIGHTEEN_YN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCwOvereighteen);
                this.columnIdCardNo = new DataColumn("CWR_IDCARDNO", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIdCardNo);
                this.columnSurname = new DataColumn("CWR_SURNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSurname);
                this.columnFirstname = new DataColumn("CWR_FIRSTNAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFirstname);
                this.columnDateOfBirth = new DataColumn("CWR_DATEOFBIRTH", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateOfBirth);
                this.columnPlaceOfBirth = new DataColumn("CWR_PLACEOFBIRTH", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlaceOfBirth);
                this.columnCreated = new DataColumn("CWR_DATECREATED", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreated);
                this.columnValidFrom = new DataColumn("CWR_VALIDFROM", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValidFrom);
                this.columnValidUntil = new DataColumn("CWR_VALIDUNTIL", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValidUntil);
                this.columnOrderNo = new DataColumn("CWR_ORDERNO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrderNo);
                this.columnSecurityPass = new DataColumn("CWR_SECPASS_YN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSecurityPass);
                this.columnEntryDateCoord = new DataColumn("CWR_ENTRYDATECOOD", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEntryDateCoord);
                this.columnEntryCoordID = new DataColumn("CWR_ENTRYCOODID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEntryCoordID);
                this.columnCheckOffDateCoord = new DataColumn("CWR_CHKOFFDATECOOD", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckOffDateCoord);
                this.columnCheckOffDateCoordID = new DataColumn("CWR_CHKOFFCOODID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCheckOffDateCoordID);
                this.columnOrcerComplete = new DataColumn("CWR_ORDERCOMPLET_YN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrcerComplete);
                this.columnChangeUser = new DataColumn("CWR_CHANGEUSER", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeUser);
                this.columnTimestamp = new DataColumn("CWR_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimestamp);
                this.columnReturnZKS = new DataColumn("CWR_RETURNCODE_ZKS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReturnZKS);
                this.columnAccess = new DataColumn("CWR_ACCESS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccess);
                this.columnStatus = new DataColumn("CWR_STATUS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnMandatorID = new DataColumn("CWR_MND_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMandatorID);
                this.Constraints.Add(new UniqueConstraint("PK_COWORKER", new DataColumn[] {
                                this.columnCoWorkerID}, true));
                this.columnCoWorkerID.AllowDBNull = false;
                this.columnCoWorkerID.Unique = true;
                this.columnTK.AllowDBNull = false;
                this.columnPersNo.AllowDBNull = false;
                this.columnContractorID.AllowDBNull = false;
                this.columnCoordinatorID.AllowDBNull = false;
                this.columnCwOvereighteen.AllowDBNull = false;
                this.columnSurname.AllowDBNull = false;
                this.columnFirstname.AllowDBNull = false;
                this.columnDateOfBirth.AllowDBNull = false;
                this.columnPlaceOfBirth.AllowDBNull = false;
                this.columnCreated.AllowDBNull = false;
                this.columnValidFrom.AllowDBNull = false;
                this.columnValidUntil.AllowDBNull = false;
                this.columnSecurityPass.AllowDBNull = false;
                this.columnOrcerComplete.AllowDBNull = false;
                this.columnChangeUser.AllowDBNull = false;
                this.columnTimestamp.AllowDBNull = false;
                this.columnMandatorID.AllowDBNull = false;
            }
            
            public FPASS_COWORKERRow NewFPASS_COWORKERRow() {
                return ((FPASS_COWORKERRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FPASS_COWORKERRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FPASS_COWORKERRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FPASS_COWORKERRowChanged != null)) {
                    this.FPASS_COWORKERRowChanged(this, new FPASS_COWORKERRowChangeEvent(((FPASS_COWORKERRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FPASS_COWORKERRowChanging != null)) {
                    this.FPASS_COWORKERRowChanging(this, new FPASS_COWORKERRowChangeEvent(((FPASS_COWORKERRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FPASS_COWORKERRowDeleted != null)) {
                    this.FPASS_COWORKERRowDeleted(this, new FPASS_COWORKERRowChangeEvent(((FPASS_COWORKERRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FPASS_COWORKERRowDeleting != null)) {
                    this.FPASS_COWORKERRowDeleting(this, new FPASS_COWORKERRowChangeEvent(((FPASS_COWORKERRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFPASS_COWORKERRow(FPASS_COWORKERRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_COWORKERRow : DataRow {
            
            private FPASS_COWORKERDataTable tableFPASS_COWORKER;
            
            internal FPASS_COWORKERRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFPASS_COWORKER = ((FPASS_COWORKERDataTable)(this.Table));
            }
            
            public System.Decimal CoWorkerID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.CoWorkerIDColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.CoWorkerIDColumn] = value;
                }
            }
            
            public System.Decimal TK {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.TKColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.TKColumn] = value;
                }
            }
            
            public System.Decimal PersNo {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.PersNoColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.PersNoColumn] = value;
                }
            }
            
            public System.Decimal ContractorID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.ContractorIDColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.ContractorIDColumn] = value;
                }
            }
            
            public System.Decimal DepartmentID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFPASS_COWORKER.DepartmentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.DepartmentIDColumn] = value;
                }
            }
            
            public System.Decimal CraftID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFPASS_COWORKER.CraftIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.CraftIDColumn] = value;
                }
            }
            
            public System.Decimal CoordinatorID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.CoordinatorIDColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.CoordinatorIDColumn] = value;
                }
            }
            
            public System.Decimal SubcontractorID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFPASS_COWORKER.SubcontractorIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.SubcontractorIDColumn] = value;
                }
            }
            
            public string CwOvereighteen {
                get {
                    return ((string)(this[this.tableFPASS_COWORKER.CwOvereighteenColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.CwOvereighteenColumn] = value;
                }
            }
            
            public System.Decimal IdCardNo {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFPASS_COWORKER.IdCardNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.IdCardNoColumn] = value;
                }
            }
            
            public string Surname {
                get {
                    return ((string)(this[this.tableFPASS_COWORKER.SurnameColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.SurnameColumn] = value;
                }
            }
            
            public string Firstname {
                get {
                    return ((string)(this[this.tableFPASS_COWORKER.FirstnameColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.FirstnameColumn] = value;
                }
            }
            
            public System.DateTime DateOfBirth {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_COWORKER.DateOfBirthColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.DateOfBirthColumn] = value;
                }
            }
            
            public string PlaceOfBirth {
                get {
                    return ((string)(this[this.tableFPASS_COWORKER.PlaceOfBirthColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.PlaceOfBirthColumn] = value;
                }
            }
            
            public System.DateTime Created {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_COWORKER.CreatedColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.CreatedColumn] = value;
                }
            }
            
            public System.DateTime ValidFrom {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_COWORKER.ValidFromColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.ValidFromColumn] = value;
                }
            }
            
            public System.DateTime ValidUntil {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_COWORKER.ValidUntilColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.ValidUntilColumn] = value;
                }
            }
            
            public string OrderNo {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_COWORKER.OrderNoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.OrderNoColumn] = value;
                }
            }
            
            public string SecurityPass {
                get {
                    return ((string)(this[this.tableFPASS_COWORKER.SecurityPassColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.SecurityPassColumn] = value;
                }
            }
            
            public System.DateTime EntryDateCoord {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFPASS_COWORKER.EntryDateCoordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.EntryDateCoordColumn] = value;
                }
            }
            
            public System.Decimal EntryCoordID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFPASS_COWORKER.EntryCoordIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.EntryCoordIDColumn] = value;
                }
            }
            
            public System.DateTime CheckOffDateCoord {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFPASS_COWORKER.CheckOffDateCoordColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.CheckOffDateCoordColumn] = value;
                }
            }
            
            public System.Decimal CheckOffDateCoordID {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableFPASS_COWORKER.CheckOffDateCoordIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.CheckOffDateCoordIDColumn] = value;
                }
            }
            
            public string OrcerComplete {
                get {
                    return ((string)(this[this.tableFPASS_COWORKER.OrcerCompleteColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.OrcerCompleteColumn] = value;
                }
            }
            
            public System.Decimal ChangeUser {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.ChangeUserColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.ChangeUserColumn] = value;
                }
            }
            
            public System.DateTime Timestamp {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_COWORKER.TimestampColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.TimestampColumn] = value;
                }
            }
            
            public string ReturnZKS {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_COWORKER.ReturnZKSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.ReturnZKSColumn] = value;
                }
            }
            
            public string Access {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_COWORKER.AccessColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.AccessColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_COWORKER.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_COWORKER.StatusColumn] = value;
                }
            }
            
            public System.Decimal MandatorID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_COWORKER.MandatorIDColumn]));
                }
                set {
                    this[this.tableFPASS_COWORKER.MandatorIDColumn] = value;
                }
            }
            
            public bool IsDepartmentIDNull() {
                return this.IsNull(this.tableFPASS_COWORKER.DepartmentIDColumn);
            }
            
            public void SetDepartmentIDNull() {
                this[this.tableFPASS_COWORKER.DepartmentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCraftIDNull() {
                return this.IsNull(this.tableFPASS_COWORKER.CraftIDColumn);
            }
            
            public void SetCraftIDNull() {
                this[this.tableFPASS_COWORKER.CraftIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubcontractorIDNull() {
                return this.IsNull(this.tableFPASS_COWORKER.SubcontractorIDColumn);
            }
            
            public void SetSubcontractorIDNull() {
                this[this.tableFPASS_COWORKER.SubcontractorIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsIdCardNoNull() {
                return this.IsNull(this.tableFPASS_COWORKER.IdCardNoColumn);
            }
            
            public void SetIdCardNoNull() {
                this[this.tableFPASS_COWORKER.IdCardNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderNoNull() {
                return this.IsNull(this.tableFPASS_COWORKER.OrderNoColumn);
            }
            
            public void SetOrderNoNull() {
                this[this.tableFPASS_COWORKER.OrderNoColumn] = System.Convert.DBNull;
            }
            
            public bool IsEntryDateCoordNull() {
                return this.IsNull(this.tableFPASS_COWORKER.EntryDateCoordColumn);
            }
            
            public void SetEntryDateCoordNull() {
                this[this.tableFPASS_COWORKER.EntryDateCoordColumn] = System.Convert.DBNull;
            }
            
            public bool IsEntryCoordIDNull() {
                return this.IsNull(this.tableFPASS_COWORKER.EntryCoordIDColumn);
            }
            
            public void SetEntryCoordIDNull() {
                this[this.tableFPASS_COWORKER.EntryCoordIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckOffDateCoordNull() {
                return this.IsNull(this.tableFPASS_COWORKER.CheckOffDateCoordColumn);
            }
            
            public void SetCheckOffDateCoordNull() {
                this[this.tableFPASS_COWORKER.CheckOffDateCoordColumn] = System.Convert.DBNull;
            }
            
            public bool IsCheckOffDateCoordIDNull() {
                return this.IsNull(this.tableFPASS_COWORKER.CheckOffDateCoordIDColumn);
            }
            
            public void SetCheckOffDateCoordIDNull() {
                this[this.tableFPASS_COWORKER.CheckOffDateCoordIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsReturnZKSNull() {
                return this.IsNull(this.tableFPASS_COWORKER.ReturnZKSColumn);
            }
            
            public void SetReturnZKSNull() {
                this[this.tableFPASS_COWORKER.ReturnZKSColumn] = System.Convert.DBNull;
            }
            
            public bool IsAccessNull() {
                return this.IsNull(this.tableFPASS_COWORKER.AccessColumn);
            }
            
            public void SetAccessNull() {
                this[this.tableFPASS_COWORKER.AccessColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableFPASS_COWORKER.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableFPASS_COWORKER.StatusColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_COWORKERRowChangeEvent : EventArgs {
            
            private FPASS_COWORKERRow eventRow;
            
            private DataRowAction eventAction;
            
            public FPASS_COWORKERRowChangeEvent(FPASS_COWORKERRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FPASS_COWORKERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_RECEPTIONAUTHORIZEDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnReceptionAuthorizeID;
            
            private DataColumn columnPKCoWorkerID;
            
            private DataColumn columnAuthorizationType;
            
            private DataColumn columnChangeUser;
            
            private DataColumn columnAuthorozationYN;
            
            private DataColumn columnDateOfAutorization;
            
            private DataColumn columnTimestamp;
            
            private DataColumn columnUserName;
            
            internal FPASS_RECEPTIONAUTHORIZEDataTable() : 
                    base("FPASS_RECEPTIONAUTHORIZE") {
                this.InitClass();
            }
            
            internal FPASS_RECEPTIONAUTHORIZEDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ReceptionAuthorizeIDColumn {
                get {
                    return this.columnReceptionAuthorizeID;
                }
            }
            
            internal DataColumn PKCoWorkerIDColumn {
                get {
                    return this.columnPKCoWorkerID;
                }
            }
            
            internal DataColumn AuthorizationTypeColumn {
                get {
                    return this.columnAuthorizationType;
                }
            }
            
            internal DataColumn ChangeUserColumn {
                get {
                    return this.columnChangeUser;
                }
            }
            
            internal DataColumn AuthorozationYNColumn {
                get {
                    return this.columnAuthorozationYN;
                }
            }
            
            internal DataColumn DateOfAutorizationColumn {
                get {
                    return this.columnDateOfAutorization;
                }
            }
            
            internal DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            internal DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            public FPASS_RECEPTIONAUTHORIZERow this[int index] {
                get {
                    return ((FPASS_RECEPTIONAUTHORIZERow)(this.Rows[index]));
                }
            }
            
            public event FPASS_RECEPTIONAUTHORIZERowChangeEventHandler FPASS_RECEPTIONAUTHORIZERowChanged;
            
            public event FPASS_RECEPTIONAUTHORIZERowChangeEventHandler FPASS_RECEPTIONAUTHORIZERowChanging;
            
            public event FPASS_RECEPTIONAUTHORIZERowChangeEventHandler FPASS_RECEPTIONAUTHORIZERowDeleted;
            
            public event FPASS_RECEPTIONAUTHORIZERowChangeEventHandler FPASS_RECEPTIONAUTHORIZERowDeleting;
            
            public void AddFPASS_RECEPTIONAUTHORIZERow(FPASS_RECEPTIONAUTHORIZERow row) {
                this.Rows.Add(row);
            }
            
            public FPASS_RECEPTIONAUTHORIZERow AddFPASS_RECEPTIONAUTHORIZERow(System.Decimal ReceptionAuthorizeID, System.Decimal PKCoWorkerID, System.Decimal AuthorizationType, System.Decimal ChangeUser, string AuthorozationYN, System.DateTime DateOfAutorization, System.DateTime Timestamp, string UserName) {
                FPASS_RECEPTIONAUTHORIZERow rowFPASS_RECEPTIONAUTHORIZERow = ((FPASS_RECEPTIONAUTHORIZERow)(this.NewRow()));
                rowFPASS_RECEPTIONAUTHORIZERow.ItemArray = new object[] {
                        ReceptionAuthorizeID,
                        PKCoWorkerID,
                        AuthorizationType,
                        ChangeUser,
                        AuthorozationYN,
                        DateOfAutorization,
                        Timestamp,
                        UserName};
                this.Rows.Add(rowFPASS_RECEPTIONAUTHORIZERow);
                return rowFPASS_RECEPTIONAUTHORIZERow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FPASS_RECEPTIONAUTHORIZEDataTable cln = ((FPASS_RECEPTIONAUTHORIZEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FPASS_RECEPTIONAUTHORIZEDataTable();
            }
            
            internal void InitVars() {
                this.columnReceptionAuthorizeID = this.Columns["RATH_ID"];
                this.columnPKCoWorkerID = this.Columns["RATH_CWR_ID"];
                this.columnAuthorizationType = this.Columns["RATH_RATT_ID"];
                this.columnChangeUser = this.Columns["RATH_USER_ID"];
                this.columnAuthorozationYN = this.Columns["RATH_RECEPTAUTHO_YN"];
                this.columnDateOfAutorization = this.Columns["RATH_RECEPTAUTHODATE"];
                this.columnTimestamp = this.Columns["RATH_TIMESTAMP"];
                this.columnUserName = this.Columns["USER_NAME"];
            }
            
            private void InitClass() {
                this.columnReceptionAuthorizeID = new DataColumn("RATH_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReceptionAuthorizeID);
                this.columnPKCoWorkerID = new DataColumn("RATH_CWR_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPKCoWorkerID);
                this.columnAuthorizationType = new DataColumn("RATH_RATT_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorizationType);
                this.columnChangeUser = new DataColumn("RATH_USER_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeUser);
                this.columnAuthorozationYN = new DataColumn("RATH_RECEPTAUTHO_YN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorozationYN);
                this.columnDateOfAutorization = new DataColumn("RATH_RECEPTAUTHODATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateOfAutorization);
                this.columnTimestamp = new DataColumn("RATH_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimestamp);
                this.columnUserName = new DataColumn("USER_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.Constraints.Add(new UniqueConstraint("PK_RECEPTIONAUTHORIZE", new DataColumn[] {
                                this.columnReceptionAuthorizeID}, false));
                this.columnReceptionAuthorizeID.AllowDBNull = false;
                this.columnReceptionAuthorizeID.Unique = true;
                this.columnPKCoWorkerID.AllowDBNull = false;
                this.columnAuthorizationType.AllowDBNull = false;
                this.columnChangeUser.AllowDBNull = false;
                this.columnAuthorozationYN.AllowDBNull = false;
                this.columnTimestamp.AllowDBNull = false;
            }
            
            public FPASS_RECEPTIONAUTHORIZERow NewFPASS_RECEPTIONAUTHORIZERow() {
                return ((FPASS_RECEPTIONAUTHORIZERow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FPASS_RECEPTIONAUTHORIZERow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FPASS_RECEPTIONAUTHORIZERow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FPASS_RECEPTIONAUTHORIZERowChanged != null)) {
                    this.FPASS_RECEPTIONAUTHORIZERowChanged(this, new FPASS_RECEPTIONAUTHORIZERowChangeEvent(((FPASS_RECEPTIONAUTHORIZERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FPASS_RECEPTIONAUTHORIZERowChanging != null)) {
                    this.FPASS_RECEPTIONAUTHORIZERowChanging(this, new FPASS_RECEPTIONAUTHORIZERowChangeEvent(((FPASS_RECEPTIONAUTHORIZERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FPASS_RECEPTIONAUTHORIZERowDeleted != null)) {
                    this.FPASS_RECEPTIONAUTHORIZERowDeleted(this, new FPASS_RECEPTIONAUTHORIZERowChangeEvent(((FPASS_RECEPTIONAUTHORIZERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FPASS_RECEPTIONAUTHORIZERowDeleting != null)) {
                    this.FPASS_RECEPTIONAUTHORIZERowDeleting(this, new FPASS_RECEPTIONAUTHORIZERowChangeEvent(((FPASS_RECEPTIONAUTHORIZERow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFPASS_RECEPTIONAUTHORIZERow(FPASS_RECEPTIONAUTHORIZERow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_RECEPTIONAUTHORIZERow : DataRow {
            
            private FPASS_RECEPTIONAUTHORIZEDataTable tableFPASS_RECEPTIONAUTHORIZE;
            
            internal FPASS_RECEPTIONAUTHORIZERow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFPASS_RECEPTIONAUTHORIZE = ((FPASS_RECEPTIONAUTHORIZEDataTable)(this.Table));
            }
            
            public System.Decimal ReceptionAuthorizeID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZE.ReceptionAuthorizeIDColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.ReceptionAuthorizeIDColumn] = value;
                }
            }
            
            public System.Decimal PKCoWorkerID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZE.PKCoWorkerIDColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.PKCoWorkerIDColumn] = value;
                }
            }
            
            public System.Decimal AuthorizationType {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZE.AuthorizationTypeColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.AuthorizationTypeColumn] = value;
                }
            }
            
            public System.Decimal ChangeUser {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZE.ChangeUserColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.ChangeUserColumn] = value;
                }
            }
            
            public string AuthorozationYN {
                get {
                    return ((string)(this[this.tableFPASS_RECEPTIONAUTHORIZE.AuthorozationYNColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.AuthorozationYNColumn] = value;
                }
            }
            
            public System.DateTime DateOfAutorization {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFPASS_RECEPTIONAUTHORIZE.DateOfAutorizationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.DateOfAutorizationColumn] = value;
                }
            }
            
            public System.DateTime Timestamp {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_RECEPTIONAUTHORIZE.TimestampColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.TimestampColumn] = value;
                }
            }
            
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_RECEPTIONAUTHORIZE.UserNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZE.UserNameColumn] = value;
                }
            }
            
            public bool IsDateOfAutorizationNull() {
                return this.IsNull(this.tableFPASS_RECEPTIONAUTHORIZE.DateOfAutorizationColumn);
            }
            
            public void SetDateOfAutorizationNull() {
                this[this.tableFPASS_RECEPTIONAUTHORIZE.DateOfAutorizationColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserNameNull() {
                return this.IsNull(this.tableFPASS_RECEPTIONAUTHORIZE.UserNameColumn);
            }
            
            public void SetUserNameNull() {
                this[this.tableFPASS_RECEPTIONAUTHORIZE.UserNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_RECEPTIONAUTHORIZERowChangeEvent : EventArgs {
            
            private FPASS_RECEPTIONAUTHORIZERow eventRow;
            
            private DataRowAction eventAction;
            
            public FPASS_RECEPTIONAUTHORIZERowChangeEvent(FPASS_RECEPTIONAUTHORIZERow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FPASS_RECEPTIONAUTHORIZERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_RECEPTIONAUTHORIZEACCESSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnReceptionAuthorizeID;
            
            private DataColumn columnPKCoWorkerID;
            
            private DataColumn columnAuthorizationType;
            
            private DataColumn columnChangeUser;
            
            private DataColumn columnAuthorozationYN;
            
            private DataColumn columnDateOfAutorization;
            
            private DataColumn columnTimestamp;
            
            private DataColumn columnUserName;
            
            internal FPASS_RECEPTIONAUTHORIZEACCESSDataTable() : 
                    base("FPASS_RECEPTIONAUTHORIZEACCESS") {
                this.InitClass();
            }
            
            internal FPASS_RECEPTIONAUTHORIZEACCESSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ReceptionAuthorizeIDColumn {
                get {
                    return this.columnReceptionAuthorizeID;
                }
            }
            
            internal DataColumn PKCoWorkerIDColumn {
                get {
                    return this.columnPKCoWorkerID;
                }
            }
            
            internal DataColumn AuthorizationTypeColumn {
                get {
                    return this.columnAuthorizationType;
                }
            }
            
            internal DataColumn ChangeUserColumn {
                get {
                    return this.columnChangeUser;
                }
            }
            
            internal DataColumn AuthorozationYNColumn {
                get {
                    return this.columnAuthorozationYN;
                }
            }
            
            internal DataColumn DateOfAutorizationColumn {
                get {
                    return this.columnDateOfAutorization;
                }
            }
            
            internal DataColumn TimestampColumn {
                get {
                    return this.columnTimestamp;
                }
            }
            
            internal DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            public FPASS_RECEPTIONAUTHORIZEACCESSRow this[int index] {
                get {
                    return ((FPASS_RECEPTIONAUTHORIZEACCESSRow)(this.Rows[index]));
                }
            }
            
            public event FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEventHandler FPASS_RECEPTIONAUTHORIZEACCESSRowChanged;
            
            public event FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEventHandler FPASS_RECEPTIONAUTHORIZEACCESSRowChanging;
            
            public event FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEventHandler FPASS_RECEPTIONAUTHORIZEACCESSRowDeleted;
            
            public event FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEventHandler FPASS_RECEPTIONAUTHORIZEACCESSRowDeleting;
            
            public void AddFPASS_RECEPTIONAUTHORIZEACCESSRow(FPASS_RECEPTIONAUTHORIZEACCESSRow row) {
                this.Rows.Add(row);
            }
            
            public FPASS_RECEPTIONAUTHORIZEACCESSRow AddFPASS_RECEPTIONAUTHORIZEACCESSRow(System.Decimal ReceptionAuthorizeID, System.Decimal PKCoWorkerID, System.Decimal AuthorizationType, System.Decimal ChangeUser, string AuthorozationYN, System.DateTime DateOfAutorization, System.DateTime Timestamp, string UserName) {
                FPASS_RECEPTIONAUTHORIZEACCESSRow rowFPASS_RECEPTIONAUTHORIZEACCESSRow = ((FPASS_RECEPTIONAUTHORIZEACCESSRow)(this.NewRow()));
                rowFPASS_RECEPTIONAUTHORIZEACCESSRow.ItemArray = new object[] {
                        ReceptionAuthorizeID,
                        PKCoWorkerID,
                        AuthorizationType,
                        ChangeUser,
                        AuthorozationYN,
                        DateOfAutorization,
                        Timestamp,
                        UserName};
                this.Rows.Add(rowFPASS_RECEPTIONAUTHORIZEACCESSRow);
                return rowFPASS_RECEPTIONAUTHORIZEACCESSRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FPASS_RECEPTIONAUTHORIZEACCESSDataTable cln = ((FPASS_RECEPTIONAUTHORIZEACCESSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FPASS_RECEPTIONAUTHORIZEACCESSDataTable();
            }
            
            internal void InitVars() {
                this.columnReceptionAuthorizeID = this.Columns["RATH_ID"];
                this.columnPKCoWorkerID = this.Columns["RATH_CWR_ID"];
                this.columnAuthorizationType = this.Columns["RATH_RATT_ID"];
                this.columnChangeUser = this.Columns["RATH_USER_ID"];
                this.columnAuthorozationYN = this.Columns["RATH_RECEPTAUTHO_YN"];
                this.columnDateOfAutorization = this.Columns["RATH_RECEPTAUTHODATE"];
                this.columnTimestamp = this.Columns["RATH_TIMESTAMP"];
                this.columnUserName = this.Columns["USER_NAME"];
            }
            
            private void InitClass() {
                this.columnReceptionAuthorizeID = new DataColumn("RATH_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReceptionAuthorizeID);
                this.columnPKCoWorkerID = new DataColumn("RATH_CWR_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPKCoWorkerID);
                this.columnAuthorizationType = new DataColumn("RATH_RATT_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorizationType);
                this.columnChangeUser = new DataColumn("RATH_USER_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeUser);
                this.columnAuthorozationYN = new DataColumn("RATH_RECEPTAUTHO_YN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAuthorozationYN);
                this.columnDateOfAutorization = new DataColumn("RATH_RECEPTAUTHODATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateOfAutorization);
                this.columnTimestamp = new DataColumn("RATH_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimestamp);
                this.columnUserName = new DataColumn("USER_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserName);
                this.columnReceptionAuthorizeID.AllowDBNull = false;
                this.columnPKCoWorkerID.AllowDBNull = false;
                this.columnAuthorizationType.AllowDBNull = false;
                this.columnChangeUser.AllowDBNull = false;
                this.columnAuthorozationYN.AllowDBNull = false;
                this.columnTimestamp.AllowDBNull = false;
            }
            
            public FPASS_RECEPTIONAUTHORIZEACCESSRow NewFPASS_RECEPTIONAUTHORIZEACCESSRow() {
                return ((FPASS_RECEPTIONAUTHORIZEACCESSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FPASS_RECEPTIONAUTHORIZEACCESSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FPASS_RECEPTIONAUTHORIZEACCESSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FPASS_RECEPTIONAUTHORIZEACCESSRowChanged != null)) {
                    this.FPASS_RECEPTIONAUTHORIZEACCESSRowChanged(this, new FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent(((FPASS_RECEPTIONAUTHORIZEACCESSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FPASS_RECEPTIONAUTHORIZEACCESSRowChanging != null)) {
                    this.FPASS_RECEPTIONAUTHORIZEACCESSRowChanging(this, new FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent(((FPASS_RECEPTIONAUTHORIZEACCESSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FPASS_RECEPTIONAUTHORIZEACCESSRowDeleted != null)) {
                    this.FPASS_RECEPTIONAUTHORIZEACCESSRowDeleted(this, new FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent(((FPASS_RECEPTIONAUTHORIZEACCESSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FPASS_RECEPTIONAUTHORIZEACCESSRowDeleting != null)) {
                    this.FPASS_RECEPTIONAUTHORIZEACCESSRowDeleting(this, new FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent(((FPASS_RECEPTIONAUTHORIZEACCESSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFPASS_RECEPTIONAUTHORIZEACCESSRow(FPASS_RECEPTIONAUTHORIZEACCESSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_RECEPTIONAUTHORIZEACCESSRow : DataRow {
            
            private FPASS_RECEPTIONAUTHORIZEACCESSDataTable tableFPASS_RECEPTIONAUTHORIZEACCESS;
            
            internal FPASS_RECEPTIONAUTHORIZEACCESSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFPASS_RECEPTIONAUTHORIZEACCESS = ((FPASS_RECEPTIONAUTHORIZEACCESSDataTable)(this.Table));
            }
            
            public System.Decimal ReceptionAuthorizeID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.ReceptionAuthorizeIDColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.ReceptionAuthorizeIDColumn] = value;
                }
            }
            
            public System.Decimal PKCoWorkerID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.PKCoWorkerIDColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.PKCoWorkerIDColumn] = value;
                }
            }
            
            public System.Decimal AuthorizationType {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.AuthorizationTypeColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.AuthorizationTypeColumn] = value;
                }
            }
            
            public System.Decimal ChangeUser {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.ChangeUserColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.ChangeUserColumn] = value;
                }
            }
            
            public string AuthorozationYN {
                get {
                    return ((string)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.AuthorozationYNColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.AuthorozationYNColumn] = value;
                }
            }
            
            public System.DateTime DateOfAutorization {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.DateOfAutorizationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.DateOfAutorizationColumn] = value;
                }
            }
            
            public System.DateTime Timestamp {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.TimestampColumn]));
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.TimestampColumn] = value;
                }
            }
            
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.UserNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.UserNameColumn] = value;
                }
            }
            
            public bool IsDateOfAutorizationNull() {
                return this.IsNull(this.tableFPASS_RECEPTIONAUTHORIZEACCESS.DateOfAutorizationColumn);
            }
            
            public void SetDateOfAutorizationNull() {
                this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.DateOfAutorizationColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserNameNull() {
                return this.IsNull(this.tableFPASS_RECEPTIONAUTHORIZEACCESS.UserNameColumn);
            }
            
            public void SetUserNameNull() {
                this[this.tableFPASS_RECEPTIONAUTHORIZEACCESS.UserNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent : EventArgs {
            
            private FPASS_RECEPTIONAUTHORIZEACCESSRow eventRow;
            
            private DataRowAction eventAction;
            
            public FPASS_RECEPTIONAUTHORIZEACCESSRowChangeEvent(FPASS_RECEPTIONAUTHORIZEACCESSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FPASS_RECEPTIONAUTHORIZEACCESSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
