//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Degussa.FPASS.Db.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSPrecMedType : DataSet {
        
        private FPASS_PRECMEDTYPEDataTable tableFPASS_PRECMEDTYPE;
        
        public DSPrecMedType() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSPrecMedType(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FPASS_PRECMEDTYPE"] != null)) {
                    this.Tables.Add(new FPASS_PRECMEDTYPEDataTable(ds.Tables["FPASS_PRECMEDTYPE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FPASS_PRECMEDTYPEDataTable FPASS_PRECMEDTYPE {
            get {
                return this.tableFPASS_PRECMEDTYPE;
            }
        }
        
        public override DataSet Clone() {
            DSPrecMedType cln = ((DSPrecMedType)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FPASS_PRECMEDTYPE"] != null)) {
                this.Tables.Add(new FPASS_PRECMEDTYPEDataTable(ds.Tables["FPASS_PRECMEDTYPE"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFPASS_PRECMEDTYPE = ((FPASS_PRECMEDTYPEDataTable)(this.Tables["FPASS_PRECMEDTYPE"]));
            if ((this.tableFPASS_PRECMEDTYPE != null)) {
                this.tableFPASS_PRECMEDTYPE.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSPrecMedType";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSPrecMedType.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFPASS_PRECMEDTYPE = new FPASS_PRECMEDTYPEDataTable();
            this.Tables.Add(this.tableFPASS_PRECMEDTYPE);
        }
        
        private bool ShouldSerializeFPASS_PRECMEDTYPE() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FPASS_PRECMEDTYPERowChangeEventHandler(object sender, FPASS_PRECMEDTYPERowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_PRECMEDTYPEDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPMTY_CHANGEUSER;
            
            private DataColumn columnPMTY_TIMESTAMP;
            
            private DataColumn columnPMTY_ID;
            
            private DataColumn columnPMTY_MND_ID;
            
            private DataColumn columnPMTY_TYPE;
            
            private DataColumn columnPMTY_NOTATION;
            
            private DataColumn columnPMTY_HELPFILE;
            
            internal FPASS_PRECMEDTYPEDataTable() : 
                    base("FPASS_PRECMEDTYPE") {
                this.InitClass();
            }
            
            internal FPASS_PRECMEDTYPEDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PMTY_CHANGEUSERColumn {
                get {
                    return this.columnPMTY_CHANGEUSER;
                }
            }
            
            internal DataColumn PMTY_TIMESTAMPColumn {
                get {
                    return this.columnPMTY_TIMESTAMP;
                }
            }
            
            internal DataColumn PMTY_IDColumn {
                get {
                    return this.columnPMTY_ID;
                }
            }
            
            internal DataColumn PMTY_MND_IDColumn {
                get {
                    return this.columnPMTY_MND_ID;
                }
            }
            
            internal DataColumn PMTY_TYPEColumn {
                get {
                    return this.columnPMTY_TYPE;
                }
            }
            
            internal DataColumn PMTY_NOTATIONColumn {
                get {
                    return this.columnPMTY_NOTATION;
                }
            }
            
            internal DataColumn PMTY_HELPFILEColumn {
                get {
                    return this.columnPMTY_HELPFILE;
                }
            }
            
            public FPASS_PRECMEDTYPERow this[int index] {
                get {
                    return ((FPASS_PRECMEDTYPERow)(this.Rows[index]));
                }
            }
            
            public event FPASS_PRECMEDTYPERowChangeEventHandler FPASS_PRECMEDTYPERowChanged;
            
            public event FPASS_PRECMEDTYPERowChangeEventHandler FPASS_PRECMEDTYPERowChanging;
            
            public event FPASS_PRECMEDTYPERowChangeEventHandler FPASS_PRECMEDTYPERowDeleted;
            
            public event FPASS_PRECMEDTYPERowChangeEventHandler FPASS_PRECMEDTYPERowDeleting;
            
            public void AddFPASS_PRECMEDTYPERow(FPASS_PRECMEDTYPERow row) {
                this.Rows.Add(row);
            }
            
            public FPASS_PRECMEDTYPERow AddFPASS_PRECMEDTYPERow(System.Decimal PMTY_CHANGEUSER, System.DateTime PMTY_TIMESTAMP, System.Decimal PMTY_ID, System.Decimal PMTY_MND_ID, string PMTY_TYPE, string PMTY_NOTATION, string PMTY_HELPFILE) {
                FPASS_PRECMEDTYPERow rowFPASS_PRECMEDTYPERow = ((FPASS_PRECMEDTYPERow)(this.NewRow()));
                rowFPASS_PRECMEDTYPERow.ItemArray = new object[] {
                        PMTY_CHANGEUSER,
                        PMTY_TIMESTAMP,
                        PMTY_ID,
                        PMTY_MND_ID,
                        PMTY_TYPE,
                        PMTY_NOTATION,
                        PMTY_HELPFILE};
                this.Rows.Add(rowFPASS_PRECMEDTYPERow);
                return rowFPASS_PRECMEDTYPERow;
            }
            
            public FPASS_PRECMEDTYPERow FindByPMTY_ID(System.Decimal PMTY_ID) {
                return ((FPASS_PRECMEDTYPERow)(this.Rows.Find(new object[] {
                            PMTY_ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FPASS_PRECMEDTYPEDataTable cln = ((FPASS_PRECMEDTYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FPASS_PRECMEDTYPEDataTable();
            }
            
            internal void InitVars() {
                this.columnPMTY_CHANGEUSER = this.Columns["PMTY_CHANGEUSER"];
                this.columnPMTY_TIMESTAMP = this.Columns["PMTY_TIMESTAMP"];
                this.columnPMTY_ID = this.Columns["PMTY_ID"];
                this.columnPMTY_MND_ID = this.Columns["PMTY_MND_ID"];
                this.columnPMTY_TYPE = this.Columns["PMTY_TYPE"];
                this.columnPMTY_NOTATION = this.Columns["PMTY_NOTATION"];
                this.columnPMTY_HELPFILE = this.Columns["PMTY_HELPFILE"];
            }
            
            private void InitClass() {
                this.columnPMTY_CHANGEUSER = new DataColumn("PMTY_CHANGEUSER", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_CHANGEUSER);
                this.columnPMTY_TIMESTAMP = new DataColumn("PMTY_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_TIMESTAMP);
                this.columnPMTY_ID = new DataColumn("PMTY_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_ID);
                this.columnPMTY_MND_ID = new DataColumn("PMTY_MND_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_MND_ID);
                this.columnPMTY_TYPE = new DataColumn("PMTY_TYPE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_TYPE);
                this.columnPMTY_NOTATION = new DataColumn("PMTY_NOTATION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_NOTATION);
                this.columnPMTY_HELPFILE = new DataColumn("PMTY_HELPFILE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPMTY_HELPFILE);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnPMTY_ID}, true));
                this.columnPMTY_CHANGEUSER.AllowDBNull = false;
                this.columnPMTY_TIMESTAMP.AllowDBNull = false;
                this.columnPMTY_ID.AllowDBNull = false;
                this.columnPMTY_ID.Unique = true;
                this.columnPMTY_MND_ID.AllowDBNull = false;
                this.columnPMTY_TYPE.AllowDBNull = false;
                this.columnPMTY_NOTATION.AllowDBNull = false;
            }
            
            public FPASS_PRECMEDTYPERow NewFPASS_PRECMEDTYPERow() {
                return ((FPASS_PRECMEDTYPERow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FPASS_PRECMEDTYPERow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FPASS_PRECMEDTYPERow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FPASS_PRECMEDTYPERowChanged != null)) {
                    this.FPASS_PRECMEDTYPERowChanged(this, new FPASS_PRECMEDTYPERowChangeEvent(((FPASS_PRECMEDTYPERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FPASS_PRECMEDTYPERowChanging != null)) {
                    this.FPASS_PRECMEDTYPERowChanging(this, new FPASS_PRECMEDTYPERowChangeEvent(((FPASS_PRECMEDTYPERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FPASS_PRECMEDTYPERowDeleted != null)) {
                    this.FPASS_PRECMEDTYPERowDeleted(this, new FPASS_PRECMEDTYPERowChangeEvent(((FPASS_PRECMEDTYPERow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FPASS_PRECMEDTYPERowDeleting != null)) {
                    this.FPASS_PRECMEDTYPERowDeleting(this, new FPASS_PRECMEDTYPERowChangeEvent(((FPASS_PRECMEDTYPERow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFPASS_PRECMEDTYPERow(FPASS_PRECMEDTYPERow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_PRECMEDTYPERow : DataRow {
            
            private FPASS_PRECMEDTYPEDataTable tableFPASS_PRECMEDTYPE;
            
            internal FPASS_PRECMEDTYPERow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFPASS_PRECMEDTYPE = ((FPASS_PRECMEDTYPEDataTable)(this.Table));
            }
            
            public System.Decimal PMTY_CHANGEUSER {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_PRECMEDTYPE.PMTY_CHANGEUSERColumn]));
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_CHANGEUSERColumn] = value;
                }
            }
            
            public System.DateTime PMTY_TIMESTAMP {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_PRECMEDTYPE.PMTY_TIMESTAMPColumn]));
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_TIMESTAMPColumn] = value;
                }
            }
            
            public System.Decimal PMTY_ID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_PRECMEDTYPE.PMTY_IDColumn]));
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_IDColumn] = value;
                }
            }
            
            public System.Decimal PMTY_MND_ID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_PRECMEDTYPE.PMTY_MND_IDColumn]));
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_MND_IDColumn] = value;
                }
            }
            
            public string PMTY_TYPE {
                get {
                    return ((string)(this[this.tableFPASS_PRECMEDTYPE.PMTY_TYPEColumn]));
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_TYPEColumn] = value;
                }
            }
            
            public string PMTY_NOTATION {
                get {
                    return ((string)(this[this.tableFPASS_PRECMEDTYPE.PMTY_NOTATIONColumn]));
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_NOTATIONColumn] = value;
                }
            }
            
            public string PMTY_HELPFILE {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_PRECMEDTYPE.PMTY_HELPFILEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_PRECMEDTYPE.PMTY_HELPFILEColumn] = value;
                }
            }
            
            public bool IsPMTY_HELPFILENull() {
                return this.IsNull(this.tableFPASS_PRECMEDTYPE.PMTY_HELPFILEColumn);
            }
            
            public void SetPMTY_HELPFILENull() {
                this[this.tableFPASS_PRECMEDTYPE.PMTY_HELPFILEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_PRECMEDTYPERowChangeEvent : EventArgs {
            
            private FPASS_PRECMEDTYPERow eventRow;
            
            private DataRowAction eventAction;
            
            public FPASS_PRECMEDTYPERowChangeEvent(FPASS_PRECMEDTYPERow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FPASS_PRECMEDTYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
