//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Degussa.FPASS.Db.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSRole : DataSet {
        
        private UM_ROLELINKDataTable tableUM_ROLELINK;
        
        public DSRole() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSRole(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UM_ROLELINK"] != null)) {
                    this.Tables.Add(new UM_ROLELINKDataTable(ds.Tables["UM_ROLELINK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UM_ROLELINKDataTable UM_ROLELINK {
            get {
                return this.tableUM_ROLELINK;
            }
        }
        
        public override DataSet Clone() {
            DSRole cln = ((DSRole)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["UM_ROLELINK"] != null)) {
                this.Tables.Add(new UM_ROLELINKDataTable(ds.Tables["UM_ROLELINK"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableUM_ROLELINK = ((UM_ROLELINKDataTable)(this.Tables["UM_ROLELINK"]));
            if ((this.tableUM_ROLELINK != null)) {
                this.tableUM_ROLELINK.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSRole";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSRole.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableUM_ROLELINK = new UM_ROLELINKDataTable();
            this.Tables.Add(this.tableUM_ROLELINK);
        }
        
        private bool ShouldSerializeUM_ROLELINK() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void UM_ROLELINKRowChangeEventHandler(object sender, UM_ROLELINKRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UM_ROLELINKDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnRL_ROLEID;
            
            private DataColumn columnRL_AUTHORIZEDENTITYID;
            
            private DataColumn columnRL_CHANGEUSER;
            
            private DataColumn columnRL_TIMESTAMP;
            
            private DataColumn columnUM_ROLEFORMAT;
            
            private DataColumn columnUM_ROLE_NAME;
            
            internal UM_ROLELINKDataTable() : 
                    base("UM_ROLELINK") {
                this.InitClass();
            }
            
            internal UM_ROLELINKDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn RL_ROLEIDColumn {
                get {
                    return this.columnRL_ROLEID;
                }
            }
            
            internal DataColumn RL_AUTHORIZEDENTITYIDColumn {
                get {
                    return this.columnRL_AUTHORIZEDENTITYID;
                }
            }
            
            internal DataColumn RL_CHANGEUSERColumn {
                get {
                    return this.columnRL_CHANGEUSER;
                }
            }
            
            internal DataColumn RL_TIMESTAMPColumn {
                get {
                    return this.columnRL_TIMESTAMP;
                }
            }
            
            internal DataColumn UM_ROLEFORMATColumn {
                get {
                    return this.columnUM_ROLEFORMAT;
                }
            }
            
            internal DataColumn UM_ROLE_NAMEColumn {
                get {
                    return this.columnUM_ROLE_NAME;
                }
            }
            
            public UM_ROLELINKRow this[int index] {
                get {
                    return ((UM_ROLELINKRow)(this.Rows[index]));
                }
            }
            
            public event UM_ROLELINKRowChangeEventHandler UM_ROLELINKRowChanged;
            
            public event UM_ROLELINKRowChangeEventHandler UM_ROLELINKRowChanging;
            
            public event UM_ROLELINKRowChangeEventHandler UM_ROLELINKRowDeleted;
            
            public event UM_ROLELINKRowChangeEventHandler UM_ROLELINKRowDeleting;
            
            public void AddUM_ROLELINKRow(UM_ROLELINKRow row) {
                this.Rows.Add(row);
            }
            
            public UM_ROLELINKRow AddUM_ROLELINKRow(System.Decimal RL_ROLEID, System.Decimal RL_AUTHORIZEDENTITYID, System.Decimal RL_CHANGEUSER, System.DateTime RL_TIMESTAMP, string UM_ROLEFORMAT, string UM_ROLE_NAME) {
                UM_ROLELINKRow rowUM_ROLELINKRow = ((UM_ROLELINKRow)(this.NewRow()));
                rowUM_ROLELINKRow.ItemArray = new object[] {
                        RL_ROLEID,
                        RL_AUTHORIZEDENTITYID,
                        RL_CHANGEUSER,
                        RL_TIMESTAMP,
                        UM_ROLEFORMAT,
                        UM_ROLE_NAME};
                this.Rows.Add(rowUM_ROLELINKRow);
                return rowUM_ROLELINKRow;
            }
            
            public UM_ROLELINKRow FindByRL_ROLEIDRL_AUTHORIZEDENTITYID(System.Decimal RL_ROLEID, System.Decimal RL_AUTHORIZEDENTITYID) {
                return ((UM_ROLELINKRow)(this.Rows.Find(new object[] {
                            RL_ROLEID,
                            RL_AUTHORIZEDENTITYID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                UM_ROLELINKDataTable cln = ((UM_ROLELINKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new UM_ROLELINKDataTable();
            }
            
            internal void InitVars() {
                this.columnRL_ROLEID = this.Columns["RL_ROLEID"];
                this.columnRL_AUTHORIZEDENTITYID = this.Columns["RL_AUTHORIZEDENTITYID"];
                this.columnRL_CHANGEUSER = this.Columns["RL_CHANGEUSER"];
                this.columnRL_TIMESTAMP = this.Columns["RL_TIMESTAMP"];
                this.columnUM_ROLEFORMAT = this.Columns["UM_ROLEFORMAT"];
                this.columnUM_ROLE_NAME = this.Columns["UM_ROLE_NAME"];
            }
            
            private void InitClass() {
                this.columnRL_ROLEID = new DataColumn("RL_ROLEID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRL_ROLEID);
                this.columnRL_AUTHORIZEDENTITYID = new DataColumn("RL_AUTHORIZEDENTITYID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRL_AUTHORIZEDENTITYID);
                this.columnRL_CHANGEUSER = new DataColumn("RL_CHANGEUSER", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRL_CHANGEUSER);
                this.columnRL_TIMESTAMP = new DataColumn("RL_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRL_TIMESTAMP);
                this.columnUM_ROLEFORMAT = new DataColumn("UM_ROLEFORMAT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUM_ROLEFORMAT);
                this.columnUM_ROLE_NAME = new DataColumn("UM_ROLE_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUM_ROLE_NAME);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnRL_ROLEID,
                                this.columnRL_AUTHORIZEDENTITYID}, true));
                this.columnRL_ROLEID.AllowDBNull = false;
                this.columnRL_AUTHORIZEDENTITYID.AllowDBNull = false;
                this.columnRL_CHANGEUSER.AllowDBNull = false;
                this.columnRL_TIMESTAMP.AllowDBNull = false;
            }
            
            public UM_ROLELINKRow NewUM_ROLELINKRow() {
                return ((UM_ROLELINKRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new UM_ROLELINKRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UM_ROLELINKRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UM_ROLELINKRowChanged != null)) {
                    this.UM_ROLELINKRowChanged(this, new UM_ROLELINKRowChangeEvent(((UM_ROLELINKRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UM_ROLELINKRowChanging != null)) {
                    this.UM_ROLELINKRowChanging(this, new UM_ROLELINKRowChangeEvent(((UM_ROLELINKRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UM_ROLELINKRowDeleted != null)) {
                    this.UM_ROLELINKRowDeleted(this, new UM_ROLELINKRowChangeEvent(((UM_ROLELINKRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UM_ROLELINKRowDeleting != null)) {
                    this.UM_ROLELINKRowDeleting(this, new UM_ROLELINKRowChangeEvent(((UM_ROLELINKRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUM_ROLELINKRow(UM_ROLELINKRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UM_ROLELINKRow : DataRow {
            
            private UM_ROLELINKDataTable tableUM_ROLELINK;
            
            internal UM_ROLELINKRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableUM_ROLELINK = ((UM_ROLELINKDataTable)(this.Table));
            }
            
            public System.Decimal RL_ROLEID {
                get {
                    return ((System.Decimal)(this[this.tableUM_ROLELINK.RL_ROLEIDColumn]));
                }
                set {
                    this[this.tableUM_ROLELINK.RL_ROLEIDColumn] = value;
                }
            }
            
            public System.Decimal RL_AUTHORIZEDENTITYID {
                get {
                    return ((System.Decimal)(this[this.tableUM_ROLELINK.RL_AUTHORIZEDENTITYIDColumn]));
                }
                set {
                    this[this.tableUM_ROLELINK.RL_AUTHORIZEDENTITYIDColumn] = value;
                }
            }
            
            public System.Decimal RL_CHANGEUSER {
                get {
                    return ((System.Decimal)(this[this.tableUM_ROLELINK.RL_CHANGEUSERColumn]));
                }
                set {
                    this[this.tableUM_ROLELINK.RL_CHANGEUSERColumn] = value;
                }
            }
            
            public System.DateTime RL_TIMESTAMP {
                get {
                    return ((System.DateTime)(this[this.tableUM_ROLELINK.RL_TIMESTAMPColumn]));
                }
                set {
                    this[this.tableUM_ROLELINK.RL_TIMESTAMPColumn] = value;
                }
            }
            
            public string UM_ROLEFORMAT {
                get {
                    try {
                        return ((string)(this[this.tableUM_ROLELINK.UM_ROLEFORMATColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUM_ROLELINK.UM_ROLEFORMATColumn] = value;
                }
            }
            
            public string UM_ROLE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableUM_ROLELINK.UM_ROLE_NAMEColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUM_ROLELINK.UM_ROLE_NAMEColumn] = value;
                }
            }
            
            public bool IsUM_ROLEFORMATNull() {
                return this.IsNull(this.tableUM_ROLELINK.UM_ROLEFORMATColumn);
            }
            
            public void SetUM_ROLEFORMATNull() {
                this[this.tableUM_ROLELINK.UM_ROLEFORMATColumn] = System.Convert.DBNull;
            }
            
            public bool IsUM_ROLE_NAMENull() {
                return this.IsNull(this.tableUM_ROLELINK.UM_ROLE_NAMEColumn);
            }
            
            public void SetUM_ROLE_NAMENull() {
                this[this.tableUM_ROLELINK.UM_ROLE_NAMEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class UM_ROLELINKRowChangeEvent : EventArgs {
            
            private UM_ROLELINKRow eventRow;
            
            private DataRowAction eventAction;
            
            public UM_ROLELINKRowChangeEvent(UM_ROLELINKRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UM_ROLELINKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
