//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Degussa.FPASS.Db.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSCraft : DataSet {
        
        private FPASS_CRAFTDataTable tableFPASS_CRAFT;
        
        public DSCraft() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSCraft(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FPASS_CRAFT"] != null)) {
                    this.Tables.Add(new FPASS_CRAFTDataTable(ds.Tables["FPASS_CRAFT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FPASS_CRAFTDataTable FPASS_CRAFT {
            get {
                return this.tableFPASS_CRAFT;
            }
        }
        
        public override DataSet Clone() {
            DSCraft cln = ((DSCraft)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FPASS_CRAFT"] != null)) {
                this.Tables.Add(new FPASS_CRAFTDataTable(ds.Tables["FPASS_CRAFT"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFPASS_CRAFT = ((FPASS_CRAFTDataTable)(this.Tables["FPASS_CRAFT"]));
            if ((this.tableFPASS_CRAFT != null)) {
                this.tableFPASS_CRAFT.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSCraft";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSCraft.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFPASS_CRAFT = new FPASS_CRAFTDataTable();
            this.Tables.Add(this.tableFPASS_CRAFT);
        }
        
        private bool ShouldSerializeFPASS_CRAFT() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FPASS_CRAFTRowChangeEventHandler(object sender, FPASS_CRAFTRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_CRAFTDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCRA_CHANGEUSER;
            
            private DataColumn columnCRA_TIMESTAMP;
            
            private DataColumn columnCRA_ID;
            
            private DataColumn columnCRA_MND_ID;
            
            private DataColumn columnCRA_CRAFTNO;
            
            private DataColumn columnCRA_CRAFTNOTATION;
            
            internal FPASS_CRAFTDataTable() : 
                    base("FPASS_CRAFT") {
                this.InitClass();
            }
            
            internal FPASS_CRAFTDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CRA_CHANGEUSERColumn {
                get {
                    return this.columnCRA_CHANGEUSER;
                }
            }
            
            internal DataColumn CRA_TIMESTAMPColumn {
                get {
                    return this.columnCRA_TIMESTAMP;
                }
            }
            
            internal DataColumn CRA_IDColumn {
                get {
                    return this.columnCRA_ID;
                }
            }
            
            internal DataColumn CRA_MND_IDColumn {
                get {
                    return this.columnCRA_MND_ID;
                }
            }
            
            internal DataColumn CRA_CRAFTNOColumn {
                get {
                    return this.columnCRA_CRAFTNO;
                }
            }
            
            internal DataColumn CRA_CRAFTNOTATIONColumn {
                get {
                    return this.columnCRA_CRAFTNOTATION;
                }
            }
            
            public FPASS_CRAFTRow this[int index] {
                get {
                    return ((FPASS_CRAFTRow)(this.Rows[index]));
                }
            }
            
            public event FPASS_CRAFTRowChangeEventHandler FPASS_CRAFTRowChanged;
            
            public event FPASS_CRAFTRowChangeEventHandler FPASS_CRAFTRowChanging;
            
            public event FPASS_CRAFTRowChangeEventHandler FPASS_CRAFTRowDeleted;
            
            public event FPASS_CRAFTRowChangeEventHandler FPASS_CRAFTRowDeleting;
            
            public void AddFPASS_CRAFTRow(FPASS_CRAFTRow row) {
                this.Rows.Add(row);
            }
            
            public FPASS_CRAFTRow AddFPASS_CRAFTRow(System.Decimal CRA_CHANGEUSER, System.DateTime CRA_TIMESTAMP, System.Decimal CRA_ID, System.Decimal CRA_MND_ID, string CRA_CRAFTNO, string CRA_CRAFTNOTATION) {
                FPASS_CRAFTRow rowFPASS_CRAFTRow = ((FPASS_CRAFTRow)(this.NewRow()));
                rowFPASS_CRAFTRow.ItemArray = new object[] {
                        CRA_CHANGEUSER,
                        CRA_TIMESTAMP,
                        CRA_ID,
                        CRA_MND_ID,
                        CRA_CRAFTNO,
                        CRA_CRAFTNOTATION};
                this.Rows.Add(rowFPASS_CRAFTRow);
                return rowFPASS_CRAFTRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FPASS_CRAFTDataTable cln = ((FPASS_CRAFTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FPASS_CRAFTDataTable();
            }
            
            internal void InitVars() {
                this.columnCRA_CHANGEUSER = this.Columns["CRA_CHANGEUSER"];
                this.columnCRA_TIMESTAMP = this.Columns["CRA_TIMESTAMP"];
                this.columnCRA_ID = this.Columns["CRA_ID"];
                this.columnCRA_MND_ID = this.Columns["CRA_MND_ID"];
                this.columnCRA_CRAFTNO = this.Columns["CRA_CRAFTNO"];
                this.columnCRA_CRAFTNOTATION = this.Columns["CRA_CRAFTNOTATION"];
            }
            
            private void InitClass() {
                this.columnCRA_CHANGEUSER = new DataColumn("CRA_CHANGEUSER", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRA_CHANGEUSER);
                this.columnCRA_TIMESTAMP = new DataColumn("CRA_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRA_TIMESTAMP);
                this.columnCRA_ID = new DataColumn("CRA_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRA_ID);
                this.columnCRA_MND_ID = new DataColumn("CRA_MND_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRA_MND_ID);
                this.columnCRA_CRAFTNO = new DataColumn("CRA_CRAFTNO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRA_CRAFTNO);
                this.columnCRA_CRAFTNOTATION = new DataColumn("CRA_CRAFTNOTATION", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCRA_CRAFTNOTATION);
                this.columnCRA_CHANGEUSER.AllowDBNull = false;
                this.columnCRA_TIMESTAMP.AllowDBNull = false;
                this.columnCRA_ID.AllowDBNull = false;
                this.columnCRA_MND_ID.AllowDBNull = false;
                this.columnCRA_CRAFTNO.AllowDBNull = false;
                this.columnCRA_CRAFTNOTATION.AllowDBNull = false;
            }
            
            public FPASS_CRAFTRow NewFPASS_CRAFTRow() {
                return ((FPASS_CRAFTRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FPASS_CRAFTRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FPASS_CRAFTRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FPASS_CRAFTRowChanged != null)) {
                    this.FPASS_CRAFTRowChanged(this, new FPASS_CRAFTRowChangeEvent(((FPASS_CRAFTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FPASS_CRAFTRowChanging != null)) {
                    this.FPASS_CRAFTRowChanging(this, new FPASS_CRAFTRowChangeEvent(((FPASS_CRAFTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FPASS_CRAFTRowDeleted != null)) {
                    this.FPASS_CRAFTRowDeleted(this, new FPASS_CRAFTRowChangeEvent(((FPASS_CRAFTRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FPASS_CRAFTRowDeleting != null)) {
                    this.FPASS_CRAFTRowDeleting(this, new FPASS_CRAFTRowChangeEvent(((FPASS_CRAFTRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFPASS_CRAFTRow(FPASS_CRAFTRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_CRAFTRow : DataRow {
            
            private FPASS_CRAFTDataTable tableFPASS_CRAFT;
            
            internal FPASS_CRAFTRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFPASS_CRAFT = ((FPASS_CRAFTDataTable)(this.Table));
            }
            
            public System.Decimal CRA_CHANGEUSER {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_CRAFT.CRA_CHANGEUSERColumn]));
                }
                set {
                    this[this.tableFPASS_CRAFT.CRA_CHANGEUSERColumn] = value;
                }
            }
            
            public System.DateTime CRA_TIMESTAMP {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_CRAFT.CRA_TIMESTAMPColumn]));
                }
                set {
                    this[this.tableFPASS_CRAFT.CRA_TIMESTAMPColumn] = value;
                }
            }
            
            public System.Decimal CRA_ID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_CRAFT.CRA_IDColumn]));
                }
                set {
                    this[this.tableFPASS_CRAFT.CRA_IDColumn] = value;
                }
            }
            
            public System.Decimal CRA_MND_ID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_CRAFT.CRA_MND_IDColumn]));
                }
                set {
                    this[this.tableFPASS_CRAFT.CRA_MND_IDColumn] = value;
                }
            }
            
            public string CRA_CRAFTNO {
                get {
                    return ((string)(this[this.tableFPASS_CRAFT.CRA_CRAFTNOColumn]));
                }
                set {
                    this[this.tableFPASS_CRAFT.CRA_CRAFTNOColumn] = value;
                }
            }
            
            public string CRA_CRAFTNOTATION {
                get {
                    return ((string)(this[this.tableFPASS_CRAFT.CRA_CRAFTNOTATIONColumn]));
                }
                set {
                    this[this.tableFPASS_CRAFT.CRA_CRAFTNOTATIONColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_CRAFTRowChangeEvent : EventArgs {
            
            private FPASS_CRAFTRow eventRow;
            
            private DataRowAction eventAction;
            
            public FPASS_CRAFTRowChangeEvent(FPASS_CRAFTRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FPASS_CRAFTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
