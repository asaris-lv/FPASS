//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Degussa.FPASS.Db.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSExcoCoord : DataSet {
        
        private FPASS_EXCOECODDataTable tableFPASS_EXCOECOD;
        
        public DSExcoCoord() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSExcoCoord(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["FPASS_EXCOECOD"] != null)) {
                    this.Tables.Add(new FPASS_EXCOECODDataTable(ds.Tables["FPASS_EXCOECOD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FPASS_EXCOECODDataTable FPASS_EXCOECOD {
            get {
                return this.tableFPASS_EXCOECOD;
            }
        }
        
        public override DataSet Clone() {
            DSExcoCoord cln = ((DSExcoCoord)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["FPASS_EXCOECOD"] != null)) {
                this.Tables.Add(new FPASS_EXCOECODDataTable(ds.Tables["FPASS_EXCOECOD"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFPASS_EXCOECOD = ((FPASS_EXCOECODDataTable)(this.Tables["FPASS_EXCOECOD"]));
            if ((this.tableFPASS_EXCOECOD != null)) {
                this.tableFPASS_EXCOECOD.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSExcoCoord";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DSExcoCoord.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFPASS_EXCOECOD = new FPASS_EXCOECODDataTable();
            this.Tables.Add(this.tableFPASS_EXCOECOD);
        }
        
        private bool ShouldSerializeFPASS_EXCOECOD() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FPASS_EXCOECODRowChangeEventHandler(object sender, FPASS_EXCOECODRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_EXCOECODDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnECEC_CHANGEUSER;
            
            private DataColumn columnECEC_TIMESTAMP;
            
            private DataColumn columnECEC_ECOD_ID;
            
            private DataColumn columnECEC_EXCO_ID;
            
            private DataColumn columnEXCO_NAME;
            
            private DataColumn columnUM_BOTHNAMESTEL;
            
            internal FPASS_EXCOECODDataTable() : 
                    base("FPASS_EXCOECOD") {
                this.InitClass();
            }
            
            internal FPASS_EXCOECODDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ECEC_CHANGEUSERColumn {
                get {
                    return this.columnECEC_CHANGEUSER;
                }
            }
            
            internal DataColumn ECEC_TIMESTAMPColumn {
                get {
                    return this.columnECEC_TIMESTAMP;
                }
            }
            
            internal DataColumn ECEC_ECOD_IDColumn {
                get {
                    return this.columnECEC_ECOD_ID;
                }
            }
            
            internal DataColumn ECEC_EXCO_IDColumn {
                get {
                    return this.columnECEC_EXCO_ID;
                }
            }
            
            internal DataColumn EXCO_NAMEColumn {
                get {
                    return this.columnEXCO_NAME;
                }
            }
            
            internal DataColumn UM_BOTHNAMESTELColumn {
                get {
                    return this.columnUM_BOTHNAMESTEL;
                }
            }
            
            public FPASS_EXCOECODRow this[int index] {
                get {
                    return ((FPASS_EXCOECODRow)(this.Rows[index]));
                }
            }
            
            public event FPASS_EXCOECODRowChangeEventHandler FPASS_EXCOECODRowChanged;
            
            public event FPASS_EXCOECODRowChangeEventHandler FPASS_EXCOECODRowChanging;
            
            public event FPASS_EXCOECODRowChangeEventHandler FPASS_EXCOECODRowDeleted;
            
            public event FPASS_EXCOECODRowChangeEventHandler FPASS_EXCOECODRowDeleting;
            
            public void AddFPASS_EXCOECODRow(FPASS_EXCOECODRow row) {
                this.Rows.Add(row);
            }
            
            public FPASS_EXCOECODRow AddFPASS_EXCOECODRow(System.Decimal ECEC_CHANGEUSER, System.DateTime ECEC_TIMESTAMP, System.Decimal ECEC_ECOD_ID, System.Decimal ECEC_EXCO_ID, string EXCO_NAME, string UM_BOTHNAMESTEL) {
                FPASS_EXCOECODRow rowFPASS_EXCOECODRow = ((FPASS_EXCOECODRow)(this.NewRow()));
                rowFPASS_EXCOECODRow.ItemArray = new object[] {
                        ECEC_CHANGEUSER,
                        ECEC_TIMESTAMP,
                        ECEC_ECOD_ID,
                        ECEC_EXCO_ID,
                        EXCO_NAME,
                        UM_BOTHNAMESTEL};
                this.Rows.Add(rowFPASS_EXCOECODRow);
                return rowFPASS_EXCOECODRow;
            }
            
            public FPASS_EXCOECODRow FindByECEC_ECOD_IDECEC_EXCO_ID(System.Decimal ECEC_ECOD_ID, System.Decimal ECEC_EXCO_ID) {
                return ((FPASS_EXCOECODRow)(this.Rows.Find(new object[] {
                            ECEC_ECOD_ID,
                            ECEC_EXCO_ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FPASS_EXCOECODDataTable cln = ((FPASS_EXCOECODDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FPASS_EXCOECODDataTable();
            }
            
            internal void InitVars() {
                this.columnECEC_CHANGEUSER = this.Columns["ECEC_CHANGEUSER"];
                this.columnECEC_TIMESTAMP = this.Columns["ECEC_TIMESTAMP"];
                this.columnECEC_ECOD_ID = this.Columns["ECEC_ECOD_ID"];
                this.columnECEC_EXCO_ID = this.Columns["ECEC_EXCO_ID"];
                this.columnEXCO_NAME = this.Columns["EXCO_NAME"];
                this.columnUM_BOTHNAMESTEL = this.Columns["UM_BOTHNAMESTEL"];
            }
            
            private void InitClass() {
                this.columnECEC_CHANGEUSER = new DataColumn("ECEC_CHANGEUSER", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnECEC_CHANGEUSER);
                this.columnECEC_TIMESTAMP = new DataColumn("ECEC_TIMESTAMP", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnECEC_TIMESTAMP);
                this.columnECEC_ECOD_ID = new DataColumn("ECEC_ECOD_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnECEC_ECOD_ID);
                this.columnECEC_EXCO_ID = new DataColumn("ECEC_EXCO_ID", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnECEC_EXCO_ID);
                this.columnEXCO_NAME = new DataColumn("EXCO_NAME", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEXCO_NAME);
                this.columnUM_BOTHNAMESTEL = new DataColumn("UM_BOTHNAMESTEL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUM_BOTHNAMESTEL);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnECEC_ECOD_ID,
                                this.columnECEC_EXCO_ID}, true));
                this.columnECEC_CHANGEUSER.AllowDBNull = false;
                this.columnECEC_TIMESTAMP.AllowDBNull = false;
                this.columnECEC_ECOD_ID.AllowDBNull = false;
                this.columnECEC_EXCO_ID.AllowDBNull = false;
                this.columnEXCO_NAME.AllowDBNull = false;
            }
            
            public FPASS_EXCOECODRow NewFPASS_EXCOECODRow() {
                return ((FPASS_EXCOECODRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FPASS_EXCOECODRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FPASS_EXCOECODRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FPASS_EXCOECODRowChanged != null)) {
                    this.FPASS_EXCOECODRowChanged(this, new FPASS_EXCOECODRowChangeEvent(((FPASS_EXCOECODRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FPASS_EXCOECODRowChanging != null)) {
                    this.FPASS_EXCOECODRowChanging(this, new FPASS_EXCOECODRowChangeEvent(((FPASS_EXCOECODRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FPASS_EXCOECODRowDeleted != null)) {
                    this.FPASS_EXCOECODRowDeleted(this, new FPASS_EXCOECODRowChangeEvent(((FPASS_EXCOECODRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FPASS_EXCOECODRowDeleting != null)) {
                    this.FPASS_EXCOECODRowDeleting(this, new FPASS_EXCOECODRowChangeEvent(((FPASS_EXCOECODRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFPASS_EXCOECODRow(FPASS_EXCOECODRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_EXCOECODRow : DataRow {
            
            private FPASS_EXCOECODDataTable tableFPASS_EXCOECOD;
            
            internal FPASS_EXCOECODRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFPASS_EXCOECOD = ((FPASS_EXCOECODDataTable)(this.Table));
            }
            
            public System.Decimal ECEC_CHANGEUSER {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_EXCOECOD.ECEC_CHANGEUSERColumn]));
                }
                set {
                    this[this.tableFPASS_EXCOECOD.ECEC_CHANGEUSERColumn] = value;
                }
            }
            
            public System.DateTime ECEC_TIMESTAMP {
                get {
                    return ((System.DateTime)(this[this.tableFPASS_EXCOECOD.ECEC_TIMESTAMPColumn]));
                }
                set {
                    this[this.tableFPASS_EXCOECOD.ECEC_TIMESTAMPColumn] = value;
                }
            }
            
            public System.Decimal ECEC_ECOD_ID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_EXCOECOD.ECEC_ECOD_IDColumn]));
                }
                set {
                    this[this.tableFPASS_EXCOECOD.ECEC_ECOD_IDColumn] = value;
                }
            }
            
            public System.Decimal ECEC_EXCO_ID {
                get {
                    return ((System.Decimal)(this[this.tableFPASS_EXCOECOD.ECEC_EXCO_IDColumn]));
                }
                set {
                    this[this.tableFPASS_EXCOECOD.ECEC_EXCO_IDColumn] = value;
                }
            }
            
            public string EXCO_NAME {
                get {
                    return ((string)(this[this.tableFPASS_EXCOECOD.EXCO_NAMEColumn]));
                }
                set {
                    this[this.tableFPASS_EXCOECOD.EXCO_NAMEColumn] = value;
                }
            }
            
            public string UM_BOTHNAMESTEL {
                get {
                    try {
                        return ((string)(this[this.tableFPASS_EXCOECOD.UM_BOTHNAMESTELColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFPASS_EXCOECOD.UM_BOTHNAMESTELColumn] = value;
                }
            }
            
            public bool IsUM_BOTHNAMESTELNull() {
                return this.IsNull(this.tableFPASS_EXCOECOD.UM_BOTHNAMESTELColumn);
            }
            
            public void SetUM_BOTHNAMESTELNull() {
                this[this.tableFPASS_EXCOECOD.UM_BOTHNAMESTELColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FPASS_EXCOECODRowChangeEvent : EventArgs {
            
            private FPASS_EXCOECODRow eventRow;
            
            private DataRowAction eventAction;
            
            public FPASS_EXCOECODRowChangeEvent(FPASS_EXCOECODRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FPASS_EXCOECODRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
