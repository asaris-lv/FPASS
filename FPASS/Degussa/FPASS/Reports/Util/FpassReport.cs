using System;
using System.Collections;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using de.pta.Component.DbAccess;
using de.pta.Component.Errorhandling;
using de.pta.Component.PdfGenerator;
using Degussa.FPASS.Db;
using Degussa.FPASS.Util;
using Degussa.FPASS.Util.Messages;
using Degussa.FPASS.Util.UserManagement;
using Microsoft.Win32;

namespace Degussa.FPASS.Reports.Util
{
	/// <summary>

	/// </summary>
	/// <remarks>
	/// <para><b>History</b></para>
	/// <div class="tablediv">
	/// <table class="dtTABLE" cellspacing="0">
	///		<tr>
	///			<th width="20%">PTA GmbH</th>
	///			<th width="20%">12/01/2003</th>
	///			<th width="60%">Remarks</th>
	///		</tr>
	/// </table>
	/// </div>
	/// </remarks>
	public class FpassReport
	{
		#region Members
			
		private FpassReportParameters mParameters; // report parameters
		private string mDataFile = ""; // path of the xml file that holds the report data
		private string mTemplateFile = ""; // path of the xml template file that holds the full report layout
		private string mPdfFile = ""; // path of the created pdf file
		private int mCount = 0; // number of rows in the main query of the report

		#endregion

		#region Constructors

		/// <summary>
		/// Standard constructor.
		/// </summary>
		public FpassReport(FpassReportParameters prmReportParameters)
		{
			initialize(prmReportParameters);
		}

		#endregion

		#region Initialization

		/// <summary>
		/// Transforms the index of the chosen item from the combobox "Reports" into a string
		/// this string is the core of the report file name
		/// </summary>
		private void initialize(FpassReportParameters prmReportParameters)
		{
			const string FILE_PREFIX = "Fpass_Report_";
            string PATH_TEMPLATE = Globals.GetInstance().ReportsTemplatePath;
            string PATH_DATA = Globals.GetInstance().ReportsDataPath;
			string coreName;
			
			// Initialization
			mParameters = prmReportParameters;

			// build paths with parameters data
			coreName = mParameters.FileName;
			mDataFile = PATH_DATA + FILE_PREFIX + coreName;

			mTemplateFile = PATH_TEMPLATE + FILE_PREFIX 
                + "Template_" 
                + Globals.GetInstance().FPASSApplicationVersion.Trim().Substring(0, 3) + "_" 
                + coreName + ".xml";

			mPdfFile = PATH_DATA + FILE_PREFIX + coreName;
		}

		#endregion

		#region Accessors 

		#endregion //End of Accessors

		#region Methods 
		
		/// <summary>
		/// Reads report data from the database corresponding to the selected report. (10.11..03 Bossu)
		/// </summary>
		private void LoadData()
		{
			// Variables
			XmlTextWriter reportXmlWriter = new XmlTextWriter(mDataFile, Encoding.UTF8);
			XmlDocument reportXmlDocument = new XmlDocument();

			// Arrays
			SortedList standardValues = mParameters.StandardValues;
			SortedList searchCriteria = mParameters.SearchCriteria;
			
			try
			{			
				// Creates an xml file containing the report data
				reportXmlWriter.Formatting = Formatting.Indented;
				reportXmlWriter.WriteStartDocument();
				reportXmlWriter.WriteComment("Generated by FPASS - " + DateTime.Now.ToString());
				reportXmlWriter.WriteStartElement("data");
				
				// Writes versionNo for reports
				reportXmlWriter.WriteElementString("versionNo", mParameters.VersionNo.ToString());

				// Writes standard-data for reports
				reportXmlWriter.WriteStartElement("standard_data");

				foreach (string searchCriteriumName in searchCriteria.Keys)
				{
					if ( null != searchCriteria[searchCriteriumName])
						reportXmlWriter.WriteElementString(searchCriteriumName, searchCriteria[searchCriteriumName].ToString());
					else
						// search criteria could have not been used
						reportXmlWriter.WriteElementString(searchCriteriumName, "");
				}
				
				foreach (string standardValueName in standardValues.Keys)
				{
					if ( null != standardValues[standardValueName])
						reportXmlWriter.WriteElementString(standardValueName, standardValues[standardValueName].ToString());
					else
						// no value
						reportXmlWriter.WriteElementString(standardValueName, "");
				}

				reportXmlWriter.WriteEndElement();

				// gets report data from database and write them in the xml file
				LoadDataFromDb(reportXmlWriter);

				// closes the xml file				
				reportXmlWriter.WriteEndElement();
				reportXmlWriter.WriteEndDocument();
				reportXmlWriter.Close();

				// loads the xml file into a xml document
				reportXmlDocument.Load(mDataFile);
			}
			catch (Exception ex)
			{
				Globals.GetInstance().Log.Fatal("Report-Exception", ex	);
				throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_ERROR), ex);			
			}
		}


		/// <summary>
		/// Generates pdf reports. 01.12.2003 Bossu
		/// </summary>
		public void Generate()
		{
			// Variables
			string userName = mParameters.StandardValues["US_USERID"].ToString();
			string errorMessage = "";

			// generates pdf file
			try
			{	
				// Variables
				string dateTime = DateTime.Now.ToString();
				dateTime = dateTime.Replace(" ", "_");
				dateTime = dateTime.Replace(":", "_");
				dateTime = dateTime.Replace(".", "_");
				
				// completes xml file name with username, datetime (without spaces and :) and extension
				mDataFile = mDataFile + "_" + userName + "_" + dateTime + ".xml";

				// loads report data
				LoadData();

				if (0 < mCount)
				{
					// completes pdf file name with full path, username, datetime (without spaces and :) and extension
					dateTime = DateTime.Now.ToString();
					dateTime = dateTime.Replace(" ", "_");
					dateTime = dateTime.Replace(":", "_");
					dateTime = dateTime.Replace(".", "_");
				
					mPdfFile = mPdfFile + "_" + userName + "_" + dateTime + ".pdf";

					// generates the pdf report as a file with the xml template file and the xml data string
					XML2PDF.NewInstance().Generate(mTemplateFile, mPdfFile, mDataFile);
				
					// deletes the xml file
					File.Delete(mDataFile);

					// shows pdf file or prints it directly
					Show(mPdfFile);
				}
				else
				{
					// deletes the xml file
					File.Delete(mDataFile);

					// the report will not be generated if there is no data
					errorMessage = MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_NO_DATA_FOUND);
					throw new UIWarningException();
				}
			}
            catch (UIWarningException uwe)
            {               
                ExceptionProcessor.GetInstance().Process(uwe);
            }
			catch (Exception ex)
			{
				Globals.GetInstance().Log.Fatal("Report-Exception", ex	);
				if (IsFileNotFoundException(ex))
				{
					if (WrongVersion())
					{
						throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_WRONG_VERSION), ex);
					}
				}
				if (errorMessage.Equals(""))
					throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_ERROR), ex);
				else
					throw new UIWarningException(errorMessage, ex);
			}
		}

		/// <summary>
		/// Checks whether a file for the requested report exists in the 
		/// template folder having a name that does not contain the current 
		/// application version.
		/// </summary>
		/// <returns>TRUE if the requested report's template file exists 
		/// with a wrong file version, FALSE otherwise.</returns>
		private bool WrongVersion()
		{
            string PATH_TEMPLATE = Globals.GetInstance().ReportsTemplatePath;
			return (0 < Directory.GetFiles(PATH_TEMPLATE, "*" + mParameters.FileName + ".xml").Length);
		}

		/// <summary>
		/// Checks whether the given exception contains a FileNotFoundException as inner exception.
		/// </summary>
		/// <param name="ex">An exception.</param>
		/// <returns>TRUE if the given exception is a BaseComponentException, containing
		/// a FileNotFoundException as an inner exception, FALSE otherwise.</returns>
		private bool IsFileNotFoundException(Exception ex)
		{
			BaseComponentException bce;

			if (ex is BaseComponentException)
			{	
				bce = (BaseComponentException)ex;
				if(null != bce.InnerException)
				{
					bce = (BaseComponentException)bce.InnerException;
					if(null != bce.InnerException)
					{
						return (bce.InnerException is FileNotFoundException);
					}
				}
			}
			return false;
		}

		/// <summary>
		/// Loads data from database and builds XML datafile
		/// </summary>
		/// <param name="prmXmlWriter"></param>
		private void LoadDataFromDb(XmlTextWriter prmXmlWriter)
		{
			// Variables
			string columnValue;
			string columnName;
			int columnNo;
			int columnCount;

			string subColumnValue;
			string subColumnName;
			int subColumnNo;
			int subColumnCount;

			int subBlockNo;
			int subBlockTotal;

			string[] subSqlCommandIds = mParameters.SubSqlCommandIds;
			string[,] subWhereClauses = mParameters.SubWhereClauses;

			try
			{
				// ------------------------------
				// A: Writing main datablock
				// ------------------------------

				// Creates the select command: Gets DataProvider from DbAccess component
				IProvider reportDataProvider = DBSingleton.GetInstance().DataProvider;
				IDbCommand selectCommand = reportDataProvider.CreateCommand(mParameters.MainSqlCommandId);
				
				// adds where clause and order by to the select command
				selectCommand.CommandText += " " + mParameters.WhereMain;
				selectCommand.CommandText += " " + mParameters.GroupByMain;
				selectCommand.CommandText += " " + mParameters.OrderByMain;
				
				// Opens data reader to get data from database with the select command which has a where clause now
				IDataReader reportDataReader = reportDataProvider.GetReader(selectCommand);

				// gets report data from the db
				columnCount = reportDataReader.FieldCount;

				mCount = 0;

				while (reportDataReader.Read())
				{
					mCount += 1;

					// inserts a new Data Record in the xml document (a new row)
					prmXmlWriter.WriteStartElement("datarow");

					// count the number of sub datablocks
					subBlockTotal = subWhereClauses.GetUpperBound(0) + 1;

					for (columnNo = 0; columnNo < columnCount; columnNo++)
					{
						// gets column name & value from db
						columnName = reportDataReader.GetName(columnNo);
						if (null != reportDataReader.GetValue(columnNo))
							columnValue = CorrectString(reportDataReader.GetValue(columnNo).ToString());
						else
							columnValue = ""; // no value in the database (null)
	
						// sets column name & value as xml element in xml doc
						prmXmlWriter.WriteElementString(columnName, columnValue);

						// ------------------------------
						// B: writing sub-datablocks
						// ------------------------------
						if (subBlockTotal != 0)
						{
							for (subBlockNo = 0; subBlockNo < subBlockTotal; subBlockNo++)
							{
								if (subWhereClauses[subBlockNo, 1] == columnName)
								{
									
									// Creates the select command
									IDbCommand subSelectCommand = reportDataProvider.CreateCommand(subSqlCommandIds[subBlockNo]);
					
									// adds the where clause to the select command and substitutes value at end of WHERE clause
									subSelectCommand.CommandText += " " + subWhereClauses [subBlockNo,0] + " " + columnValue;
									
									// Special case for Report "FFMAMitBewegungenSumme": 
									// have to put EXCO_ID in where-clause before adding the group by
									if (mParameters.FileName.Equals(ReportFilenames.EXCO_BOOKINGS_SUM))
									{
										subSelectCommand.CommandText += " GROUP BY CWR_ID, CWR_SURNAME, CWR_FIRSTNAME, CWR_PERSNO, CWR_IDCARDNO, CWR_EXCO_ID, EXTCON";
									}

                                    // adds Order By if required
                                    if (null != mParameters.SubOrderBys
                                        && subBlockNo < subWhereClauses.GetUpperBound(0) + 1)
                                    {
                                        subSelectCommand.CommandText += mParameters.SubOrderBys[subBlockNo];
                                    }

									// Opens data reader to get data from database with the select command which has a where clause now
									IDataReader subReportDataReader = reportDataProvider.GetReader(subSelectCommand);
									subColumnCount = subReportDataReader.FieldCount;

									// starting sub_datablock
									prmXmlWriter.WriteStartElement("sub_data_" + subBlockNo.ToString());

									while (subReportDataReader.Read())
									{
										// inserts a new Data Record in the xml document (a new row)
										prmXmlWriter.WriteStartElement("sub_datarow");

										// insert values
										for (subColumnNo = 0; subColumnNo < subColumnCount; subColumnNo++)
										{
											// gets column name & value from db
											subColumnName = subReportDataReader.GetName(subColumnNo);
											if (null != subReportDataReader.GetValue(subColumnNo))
												subColumnValue = CorrectString(subReportDataReader.GetValue(subColumnNo).ToString());
											else
												subColumnValue = "";
											// sets column name & value as xml element in xml doc
											prmXmlWriter.WriteElementString(subColumnName, subColumnValue);
										}
										// close sub_datarow
										prmXmlWriter.WriteEndElement();
									}

									// Close the reader: Not used
									//subReportDataReader.Close();

									// close sub_datablock
									prmXmlWriter.WriteEndElement();
								}
							}
						}//if (SubBlock != 0)
					}//for (Columns)

					// close row
					prmXmlWriter.WriteEndElement();

				}

				// Close the readers
				reportDataReader.Close();
			} 
			catch (Exception ex)
			{
				Globals.GetInstance().Log.Fatal("Report-Exception", ex	);
				throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_ERROR), ex);
			}
		}


		/// <summary>
		/// Open new Acrobat Reader process and show current report/pass
		///  16.12.2003: Argument /t when calling Reader not reliable, need to kill process, wait for printer etc
		/// Use /p to presentsuser with Acrobat Reader print dialogue
		/// </summary>
		/// <param name="prmPdfFile"></param>
		private void Show(string prmPdfFile)
		{
			// references the entry path of Acrobat Reader in the registry
            string regPath = Globals.GetInstance().ReportsReaderKey;
			RegistryKey root = Registry.ClassesRoot;
			RegistryKey key = root.OpenSubKey(regPath);

			if (null == key)
			{
				throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_ACROBAT_READER));
			}
			
			// the entry holds the path of the Acrobat Reader exe-file
			string readerPath = (string)key.GetValue(null);
			if (null != readerPath && 0 < readerPath.Length)
			{
				if(readerPath.StartsWith("\"") && readerPath.EndsWith("\""))
				{
					readerPath = readerPath.Substring(1, readerPath.Length -1); // cutting off \" at beginning or end if needed
				}
			}

			string[] parts = Regex.Split(readerPath, "\" \"");

			if(0 == parts.Length)
			{
				throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_ACROBAT_READER));
			}
		
			string acroPath = parts[0];
			if(acroPath.Equals(null) || "\"\"".Equals(acroPath) || 0 == acroPath.Length)
			{
				acroPath = parts[1];
			}
			
			// starts Acrobat Reader with the pdf report
			Process pdfStart      = null; 
			ProcessStartInfo info = new ProcessStartInfo();			
			info.FileName         = acroPath;

			string defPrinter     = Globals.GetInstance().GetDefaultPrinter();

			// no longer relevant
			//int printTimes = UserManagementControl.getInstance().NumberOfPrintedPass;

			try
			{
				// If no preview required then print directly, assuming machine has default printer
				if ( !UserManagementControl.getInstance().PreviewPass && !defPrinter.Equals("<no default printer>") ) 
				{				
					info.Arguments = "/p " + prmPdfFile;
				}
				else
				{
					info.Arguments = prmPdfFile;					
				}
				pdfStart = Process.Start(info);
			}
			catch (Exception ex)
			{
				Globals.GetInstance().Log.Fatal("Report-Exception", ex	);
				throw new UIWarningException(MessageSingleton.GetInstance().GetMessage(MessageSingleton.REPORT_ACROBAT_READER), ex);
			}		
		} 

		/// <summary>
		/// Formats a  string:
		/// name = "surname, firstname" comes as a result of some sql select for a person
		/// if name and firstname have no values, then the result must be "", not ", "
		/// if only the firstname has no value, then the comma must be removed
		/// </summary>
		/// <param name="prmText"></param>
		/// <returns></returns>
		private string CorrectString(string prmText)
		{ 
			string text = prmText.Trim();

			if (text.Equals(","))
				text = "";
			else if (text.EndsWith(","))
				text = text.Substring(0, text.Length - 1); // text without "," at the end
			else
				text = prmText;

			return text;
		}

		#endregion 

	}
}
